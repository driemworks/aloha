import { Type } from "@angular/core";
import { ɵDomAdapter } from "@angular/platform-browser";
export declare class NativeScriptDomAdapter implements ɵDomAdapter {
    static makeCurrent(): void;
    hasProperty(_element: any, _name: string): boolean;
    log(arg: any): void;
    logError(arg: any): void;
    logGroup(arg: any): void;
    logGroupEnd(): void;
    attrToPropMap: {
        [key: string]: string;
    };
    resourceLoaderType: Type<any>;
    setProperty(_el: Element, _name: string, _value: any): any /** TODO #9100 */;
    getProperty(_el: Element, _name: string): any;
    invoke(_el: Element, _methodName: string, _args: any[]): any;
    contains(_nodeA: any, _nodeB: any): any /** TODO #9100 */;
    parse(_templateHtml: string): any /** TODO #9100 */;
    query(_selector: string): any;
    querySelector(_el: any /** TODO #9100 */, _selector: string): HTMLElement;
    querySelectorAll(_el: any /** TODO #9100 */, _selector: string): any[];
    on(_el: any /** TODO #9100 */, _evt: any /** TODO #9100 */, _listener: any /** TODO #9100 */): any;
    onAndCancel(_el: any /** TODO #9100 */, _evt: any /** TODO #9100 */, _listener: any /** TODO #9100 */): Function;
    dispatchEvent(_el: any /** TODO #9100 */, _evt: any /** TODO #9100 */): any;
    createMouseEvent(_eventType: any /** TODO #9100 */): any;
    createEvent(_eventType: string): any;
    preventDefault(_evt: any /** TODO #9100 */): any /** TODO #9100 */;
    isPrevented(_evt: any /** TODO #9100 */): boolean;
    getInnerHTML(_el: any /** TODO #9100 */): string;
    getTemplateContent(_el: any /** TODO #9100 */): any;
    getOuterHTML(_el: any /** TODO #9100 */): string;
    nodeName(_node: any /** TODO #9100 */): string;
    nodeValue(_node: any /** TODO #9100 */): string;
    type(_node: any /** TODO #9100 */): string;
    content(_node: any /** TODO #9100 */): any;
    firstChild(_el: any /** TODO #9100 */): Node;
    nextSibling(_el: any /** TODO #9100 */): Node;
    parentElement(_el: any /** TODO #9100 */): Node;
    childNodes(_el: any /** TODO #9100 */): Node[];
    childNodesAsList(_el: any /** TODO #9100 */): Node[];
    clearNodes(_el: any /** TODO #9100 */): any /** TODO #9100 */;
    appendChild(_el: any /** TODO #9100 */, _node: any /** TODO #9100 */): any;
    removeChild(_el: any /** TODO #9100 */, _node: any /** TODO #9100 */): any;
    replaceChild(_el: any /** TODO #9100 */, _newNode: any /** TODO #9100 */, _oldNode: any /** TODO #9100 */): any /** TODO #9100 */;
    remove(_el: any /** TODO #9100 */): Node;
    insertBefore(_el: any /** TODO #9100 */, _node: any /** TODO #9100 */): any;
    insertAllBefore(_el: any /** TODO #9100 */, _nodes: any /** TODO #9100 */): any;
    insertAfter(_el: any /** TODO #9100 */, _node: any /** TODO #9100 */): any;
    setInnerHTML(_el: any /** TODO #9100 */, _value: any /** TODO #9100 */): any;
    getText(_el: any /** TODO #9100 */): string;
    setText(_el: any /** TODO #9100 */, _value: string): any /** TODO #9100 */;
    getValue(_el: any /** TODO #9100 */): string;
    setValue(_el: any /** TODO #9100 */, _value: string): any /** TODO #9100 */;
    getChecked(_el: any /** TODO #9100 */): boolean;
    setChecked(_el: any /** TODO #9100 */, _value: boolean): any /** TODO #9100 */;
    createComment(_text: string): any;
    createTemplate(_html: any /** TODO #9100 */): HTMLElement;
    createElement(_tagName: any /** TODO #9100 */, _doc?: any /** TODO #9100 */): HTMLElement;
    createElementNS(_ns: string, _tagName: string, _doc?: any /** TODO #9100 */): Element;
    createTextNode(_text: string, _doc?: any /** TODO #9100 */): Text;
    createScriptTag(_attrName: string, _attrValue: string, _doc?: any /** TODO #9100 */): HTMLElement;
    createStyleElement(_css: string, _doc?: any /** TODO #9100 */): HTMLStyleElement;
    createShadowRoot(_el: any /** TODO #9100 */): any;
    getShadowRoot(_el: any /** TODO #9100 */): any;
    getHost(_el: any /** TODO #9100 */): any;
    getDistributedNodes(_el: any /** TODO #9100 */): Node[];
    clone(_node: Node): Node;
    getElementsByClassName(_element: any /** TODO #9100 */, _name: string): HTMLElement[];
    getElementsByTagName(_element: any /** TODO #9100 */, _name: string): HTMLElement[];
    classList(_element: any /** TODO #9100 */): any[];
    addClass(_element: any /** TODO #9100 */, _className: string): any /** TODO #9100 */;
    removeClass(_element: any /** TODO #9100 */, _className: string): any /** TODO #9100 */;
    hasClass(_element: any /** TODO #9100 */, _className: string): boolean;
    setStyle(_element: any /** TODO #9100 */, _styleName: string, _styleValue: string): any;
    removeStyle(_element: any /** TODO #9100 */, _styleName: string): any /** TODO #9100 */;
    getStyle(_element: any /** TODO #9100 */, _styleName: string): string;
    hasStyle(_element: any /** TODO #9100 */, _styleName: string, _styleValue?: string): boolean;
    tagName(_element: any /** TODO #9100 */): string;
    attributeMap(_element: any /** TODO #9100 */): Map<string, string>;
    hasAttribute(_element: any /** TODO #9100 */, _attribute: string): boolean;
    hasAttributeNS(_element: any /** TODO #9100 */, _ns: string, _attribute: string): boolean;
    getAttribute(_element: any /** TODO #9100 */, _attribute: string): string;
    getAttributeNS(_element: any /** TODO #9100 */, _ns: string, _attribute: string): string;
    setAttribute(_element: any /** TODO #9100 */, _name: string, _value: string): any;
    setAttributeNS(_element: any /** TODO #9100 */, _ns: string, _name: string, _value: string): any /** TODO #9100 */;
    removeAttribute(_element: any /** TODO #9100 */, _attribute: string): any;
    removeAttributeNS(_element: any /** TODO #9100 */, _ns: string, _attribute: string): any;
    templateAwareRoot(_el: any /** TODO #9100 */): any /** TODO #9100 */;
    createHtmlDocument(): HTMLDocument;
    defaultDoc(): HTMLDocument;
    getDefaultDocument(): Document;
    getBoundingClientRect(_el: any /** TODO #9100 */): any /** TODO #9100 */;
    getTitle(): string;
    setTitle(_doc: Document, _newTitle: string): any /** TODO #9100 */;
    elementMatches(_n: any /** TODO #9100 */, _selector: string): boolean;
    isTemplateElement(_el: any): boolean;
    isTextNode(_node: any /** TODO #9100 */): boolean;
    isCommentNode(_node: any /** TODO #9100 */): boolean;
    isElementNode(_node: any /** TODO #9100 */): boolean;
    hasShadowRoot(_node: any /** TODO #9100 */): boolean;
    isShadowRoot(_node: any /** TODO #9100 */): boolean;
    importIntoDoc(_node: Node): Node;
    adoptNode(_node: Node): Node;
    getHref(_element: any /** TODO #9100 */): string;
    getEventKey(_event: any /** TODO #9100 */): string;
    resolveAndSetHref(_element: any /** TODO #9100 */, _baseUrl: string, _href: string): any;
    supportsDOMEvents(): boolean;
    supportsNativeShadowDOM(): boolean;
    getGlobalEventTarget(_doc: Document, _target: string): any;
    getHistory(): History;
    getLocation(): Location;
    getBaseHref(): string;
    resetBaseElement(): void;
    getUserAgent(): string;
    setData(_element: any /** TODO #9100 */, _name: string, _value: string): any;
    getComputedStyle(_element: any /** TODO #9100 */): any;
    getData(_element: any /** TODO #9100 */, _name: string): string;
    setGlobalVar(_name: string, _value: any): any /** TODO #9100 */;
    supportsWebAnimation(): boolean;
    performanceNow(): number;
    getAnimationPrefix(): string;
    getTransitionEnd(): string;
    supportsAnimation(): boolean;
    supportsCookies(): boolean;
    getCookie(_name: string): string;
    setCookie(_name: string, _value: string): any /** TODO #9100 */;
}
