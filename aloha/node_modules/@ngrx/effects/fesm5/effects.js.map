{"version":3,"file":"effects.js","sources":["../../../../../../modules/effects/src/effects_metadata.ts","../../../../../../modules/effects/src/effects_resolver.ts","../../../../../../modules/effects/src/actions.ts","../../../../../../modules/effects/src/effect_notification.ts","../../../../../../modules/effects/src/lifecycle_hooks.ts","../../../../../../modules/effects/src/effect_sources.ts","../../../../../../modules/effects/src/tokens.ts","../../../../../../modules/effects/src/effects_runner.ts","../../../../../../modules/effects/src/effects_root_module.ts","../../../../../../modules/effects/src/effects_feature_module.ts","../../../../../../modules/effects/src/effects_module.ts","../../../../../../modules/effects/index.ts","../../../../../../modules/effects/effects.ts"],"sourcesContent":["import { compose } from '@ngrx/store';\n\nconst METADATA_KEY = '__@ngrx/effects__';\n\nexport interface EffectMetadata<T> {\n  propertyName: Extract<keyof T, string>;\n  dispatch: boolean;\n}\n\nfunction getEffectMetadataEntries<T>(sourceProto: T): Array<EffectMetadata<T>> {\n  return sourceProto.constructor.hasOwnProperty(METADATA_KEY)\n    ? (sourceProto.constructor as any)[METADATA_KEY]\n    : [];\n}\n\nfunction setEffectMetadataEntries<T>(\n  sourceProto: T,\n  entries: Array<EffectMetadata<T>>\n) {\n  const constructor = sourceProto.constructor;\n  const meta: Array<EffectMetadata<T>> = constructor.hasOwnProperty(\n    METADATA_KEY\n  )\n    ? (constructor as any)[METADATA_KEY]\n    : Object.defineProperty(constructor, METADATA_KEY, { value: [] })[\n        METADATA_KEY\n      ];\n  Array.prototype.push.apply(meta, entries);\n}\n\nexport function Effect<T>({ dispatch = true } = {}): PropertyDecorator {\n  return function<K extends Extract<keyof T, string>>(\n    target: T,\n    propertyName: K\n  ) {\n    const metadata: EffectMetadata<T> = { propertyName, dispatch };\n    setEffectMetadataEntries<T>(target, [metadata]);\n  } as (target: {}, propertyName: string | symbol) => void;\n}\n\nexport function getSourceForInstance<T>(instance: T): T {\n  return Object.getPrototypeOf(instance);\n}\n\nexport function getSourceMetadata<T>(instance: T): Array<EffectMetadata<T>> {\n  return compose(\n    getEffectMetadataEntries,\n    getSourceForInstance\n  )(instance);\n}\n\nexport type EffectsMetadata<T> = {\n  [key in Extract<keyof T, string>]?: { dispatch: boolean }\n};\n\nexport function getEffectsMetadata<T>(instance: T): EffectsMetadata<T> {\n  const metadata: EffectsMetadata<T> = {};\n\n  for (const { propertyName, dispatch } of getSourceMetadata(instance)) {\n    metadata[propertyName] = { dispatch };\n  }\n\n  return metadata;\n}\n","import { Action } from '@ngrx/store';\nimport { merge, Notification, Observable } from 'rxjs';\nimport { ignoreElements, map, materialize } from 'rxjs/operators';\n\nimport { EffectNotification } from './effect_notification';\nimport { getSourceForInstance, getSourceMetadata } from './effects_metadata';\n\nexport function mergeEffects(\n  sourceInstance: any\n): Observable<EffectNotification> {\n  const sourceName = getSourceForInstance(sourceInstance).constructor.name;\n\n  const observables: Observable<any>[] = getSourceMetadata(sourceInstance).map(\n    ({ propertyName, dispatch }): Observable<EffectNotification> => {\n      const observable: Observable<any> =\n        typeof sourceInstance[propertyName] === 'function'\n          ? sourceInstance[propertyName]()\n          : sourceInstance[propertyName];\n\n      if (dispatch === false) {\n        return observable.pipe(ignoreElements());\n      }\n\n      const materialized$ = observable.pipe(materialize());\n\n      return materialized$.pipe(\n        map(\n          (notification: Notification<Action>): EffectNotification => ({\n            effect: sourceInstance[propertyName],\n            notification,\n            propertyName,\n            sourceName,\n            sourceInstance,\n          })\n        )\n      );\n    }\n  );\n\n  return merge(...observables);\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { Action, ScannedActionsSubject } from '@ngrx/store';\nimport { Observable, OperatorFunction, Operator } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Injectable()\nexport class Actions<V = Action> extends Observable<V> {\n  constructor(@Inject(ScannedActionsSubject) source?: Observable<V>) {\n    super();\n\n    if (source) {\n      this.source = source;\n    }\n  }\n\n  lift<R>(operator: Operator<V, R>): Observable<R> {\n    const observable = new Actions<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n}\n\n/**\n * 'ofType' filters an Observable of Actions into an observable of the actions\n * whose type strings are passed to it.\n *\n * For example, `actions.pipe(ofType('add'))` returns an\n * `Observable<AddtionAction>`\n *\n * Properly typing this function is hard and requires some advanced TS tricks\n * below.\n *\n * Type narrowing automatically works, as long as your `actions` object\n * starts with a `Actions<SomeUnionOfActions>` instead of generic `Actions`.\n *\n * For backwards compatibility, when one passes a single type argument\n * `ofType<T>('something')` the result is an `Observable<T>`. Note, that `T`\n * completely overrides any possible inference from 'something'.\n *\n * Unfortunately, for unknown 'actions: Actions' these types will produce\n * 'Observable<never>'. In such cases one has to manually set the generic type\n * like `actions.ofType<AdditionAction>('add')`.\n */\nexport function ofType<\n  V extends Extract<U, { type: T1 }>,\n  T1 extends string = string,\n  U extends Action = Action\n>(t1: T1): OperatorFunction<U, V>;\nexport function ofType<\n  V extends Extract<U, { type: T1 | T2 }>,\n  T1 extends string = string,\n  T2 extends string = string,\n  U extends Action = Action\n>(t1: T1, t2: T2): OperatorFunction<U, V>;\nexport function ofType<\n  V extends Extract<U, { type: T1 | T2 | T3 }>,\n  T1 extends string = string,\n  T2 extends string = string,\n  T3 extends string = string,\n  U extends Action = Action\n>(t1: T1, t2: T2, t3: T3): OperatorFunction<U, V>;\nexport function ofType<\n  V extends Extract<U, { type: T1 | T2 | T3 | T4 }>,\n  T1 extends string = string,\n  T2 extends string = string,\n  T3 extends string = string,\n  T4 extends string = string,\n  U extends Action = Action\n>(t1: T1, t2: T2, t3: T3, t4: T4): OperatorFunction<U, V>;\nexport function ofType<\n  V extends Extract<U, { type: T1 | T2 | T3 | T4 | T5 }>,\n  T1 extends string = string,\n  T2 extends string = string,\n  T3 extends string = string,\n  T4 extends string = string,\n  T5 extends string = string,\n  U extends Action = Action\n>(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5): OperatorFunction<U, V>;\n/**\n * Fallback for more than 5 arguments.\n * There is no inference, so the return type is the same as the input -\n * Observable<Action>.\n *\n * We provide a type parameter, even though TS will not infer it from the\n * arguments, to preserve backwards compatibility with old versions of ngrx.\n */\nexport function ofType<V extends Action>(\n  ...allowedTypes: string[]\n): OperatorFunction<Action, V>;\nexport function ofType(\n  ...allowedTypes: string[]\n): OperatorFunction<Action, Action> {\n  return filter((action: Action) =>\n    allowedTypes.some(type => type === action.type)\n  );\n}\n","import { ErrorHandler } from '@angular/core';\nimport { Action } from '@ngrx/store';\nimport { Notification, Observable } from 'rxjs';\n\nexport interface EffectNotification {\n  effect: Observable<any> | (() => Observable<any>);\n  propertyName: string;\n  sourceName: string;\n  sourceInstance: any;\n  notification: Notification<Action | null | undefined>;\n}\n\nexport function verifyOutput(\n  output: EffectNotification,\n  reporter: ErrorHandler\n) {\n  reportErrorThrown(output, reporter);\n  reportInvalidActions(output, reporter);\n}\n\nfunction reportErrorThrown(output: EffectNotification, reporter: ErrorHandler) {\n  if (output.notification.kind === 'E') {\n    reporter.handleError(output.notification.error);\n  }\n}\n\nfunction reportInvalidActions(\n  output: EffectNotification,\n  reporter: ErrorHandler\n) {\n  if (output.notification.kind === 'N') {\n    const action = output.notification.value;\n    const isInvalidAction = !isAction(action);\n\n    if (isInvalidAction) {\n      reporter.handleError(\n        new Error(\n          `Effect ${getEffectName(\n            output\n          )} dispatched an invalid action: ${stringify(action)}`\n        )\n      );\n    }\n  }\n}\n\nfunction isAction(action: any): action is Action {\n  return action && action.type && typeof action.type === 'string';\n}\n\nfunction getEffectName({\n  propertyName,\n  sourceInstance,\n  sourceName,\n}: EffectNotification) {\n  const isMethod = typeof sourceInstance[propertyName] === 'function';\n\n  return `\"${sourceName}.${propertyName}${isMethod ? '()' : ''}\"`;\n}\n\nfunction stringify(action: Action | null | undefined) {\n  try {\n    return JSON.stringify(action);\n  } catch {\n    return action;\n  }\n}\n","import { Observable } from 'rxjs';\nimport { EffectNotification } from '.';\nimport { Action } from '@ngrx/store';\n\n/**\n * @description\n * Interface to set an identifier for effect instances.\n *\n * By default, each Effects class is registered\n * once regardless of how many times the Effect class\n * is loaded. By implementing this interface, you define\n * a unique identifier to register an Effects class instance\n * multiple times.\n *\n * @usageNotes\n *\n * ### Set an identifier for an Effects class\n *\n * ```ts\n * class EffectWithIdentifier implements OnIdentifyEffects {\n * private effectIdentifier: string;\n *\n * ngrxOnIdentifyEffects() {\n *   return this.effectIdentifier;\n * }\n *\n * constructor(private effectIdentifier: string) {}\n * ```\n */\nexport interface OnIdentifyEffects {\n  /**\n   * @description\n   * String identifier to differentiate effect instances.\n   */\n  ngrxOnIdentifyEffects(): string;\n}\n\nexport const onIdentifyEffectsKey: keyof OnIdentifyEffects =\n  'ngrxOnIdentifyEffects';\n\nexport type onRunEffectsFn = (\n  resolvedEffects$: Observable<EffectNotification>\n) => Observable<EffectNotification>;\n\n/**\n * @description\n * Interface to control the lifecycle of effects.\n *\n * By default, effects are merged and subscribed to the store. Implement the OnRunEffects interface to control the lifecycle of the resolved effects.\n *\n * @usageNotes\n *\n * ### Implement the OnRunEffects interface on an Effects class\n *\n * ```ts\n * export class UserEffects implements OnRunEffects {\n *   constructor(private actions$: Actions) {}\n *\n *   ngrxOnRunEffects(resolvedEffects$: Observable<EffectNotification>) {\n *     return this.actions$.pipe(\n *       ofType('LOGGED_IN'),\n *       exhaustMap(() =>\n *         resolvedEffects$.pipe(\n *           takeUntil(this.actions$.pipe(ofType('LOGGED_OUT')))\n *         )\n *       )\n *     );\n *   }\n * }\n * ```\n */\nexport interface OnRunEffects {\n  /**\n   * @description\n   * Method to control the lifecycle of effects.\n   */\n  ngrxOnRunEffects: onRunEffectsFn;\n}\n\nexport const onRunEffectsKey: keyof OnRunEffects = 'ngrxOnRunEffects';\n\n/**\n * @description\n * Interface to dispatch an action after effect registration.\n *\n * Implement this interface to dispatch a custom action after\n * the effect has been added. You can listen to this action\n * in the rest of the application to execute something after\n * the effect is registered.\n *\n * @usageNotes\n *\n * ### Set an identifier for an Effects class\n *\n * ```ts\n * class EffectWithInitAction implements OnInitEffects {\n *\n * ngrxOnInitEffects() {\n *   return { type: '[EffectWithInitAction] Init' };\n * }\n * ```\n */\nexport interface OnInitEffects {\n  /**\n   * @description\n   * Action to be dispatched after the effect is registered.\n   */\n  ngrxOnInitEffects(): Action;\n}\n\nexport const onInitEffects: keyof OnInitEffects = 'ngrxOnInitEffects';\n","import { ErrorHandler, Injectable } from '@angular/core';\nimport { Action, Store } from '@ngrx/store';\nimport { Notification, Observable, Subject } from 'rxjs';\nimport {\n  dematerialize,\n  exhaustMap,\n  filter,\n  groupBy,\n  map,\n  mergeMap,\n} from 'rxjs/operators';\n\nimport { verifyOutput } from './effect_notification';\nimport { mergeEffects } from './effects_resolver';\nimport { getSourceForInstance } from './effects_metadata';\nimport {\n  onIdentifyEffectsKey,\n  onRunEffectsKey,\n  onRunEffectsFn,\n  OnRunEffects,\n  onInitEffects,\n} from './lifecycle_hooks';\n\n@Injectable()\nexport class EffectSources extends Subject<any> {\n  constructor(private errorHandler: ErrorHandler, private store: Store<any>) {\n    super();\n  }\n\n  addEffects(effectSourceInstance: any) {\n    this.next(effectSourceInstance);\n\n    if (\n      onInitEffects in effectSourceInstance &&\n      typeof effectSourceInstance[onInitEffects] === 'function'\n    ) {\n      this.store.dispatch(effectSourceInstance[onInitEffects]());\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toActions(): Observable<Action> {\n    return this.pipe(\n      groupBy(getSourceForInstance),\n      mergeMap(source$ => source$.pipe(groupBy(effectsInstance))),\n      mergeMap(source$ =>\n        source$.pipe(\n          exhaustMap(resolveEffectSource),\n          map(output => {\n            verifyOutput(output, this.errorHandler);\n\n            return output.notification;\n          }),\n          filter(\n            (notification): notification is Notification<Action> =>\n              notification.kind === 'N'\n          ),\n          dematerialize()\n        )\n      )\n    );\n  }\n}\n\nfunction effectsInstance(sourceInstance: any) {\n  if (\n    onIdentifyEffectsKey in sourceInstance &&\n    typeof sourceInstance[onIdentifyEffectsKey] === 'function'\n  ) {\n    return sourceInstance[onIdentifyEffectsKey]();\n  }\n\n  return '';\n}\n\nfunction resolveEffectSource(sourceInstance: any) {\n  const mergedEffects$ = mergeEffects(sourceInstance);\n\n  if (isOnRunEffects(sourceInstance)) {\n    return sourceInstance.ngrxOnRunEffects(mergedEffects$);\n  }\n\n  return mergedEffects$;\n}\n\nfunction isOnRunEffects(sourceInstance: {\n  [onRunEffectsKey]?: onRunEffectsFn;\n}): sourceInstance is OnRunEffects {\n  const source = getSourceForInstance(sourceInstance);\n\n  return (\n    onRunEffectsKey in source && typeof source[onRunEffectsKey] === 'function'\n  );\n}\n","import { InjectionToken, Type } from '@angular/core';\n\nexport const IMMEDIATE_EFFECTS = new InjectionToken<any[]>(\n  'ngrx/effects: Immediate Effects'\n);\nexport const ROOT_EFFECTS = new InjectionToken<Type<any>[]>(\n  'ngrx/effects: Root Effects'\n);\nexport const FEATURE_EFFECTS = new InjectionToken<any[][]>(\n  'ngrx/effects: Feature Effects'\n);\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Subscription } from 'rxjs';\n\nimport { EffectSources } from './effect_sources';\n\n@Injectable()\nexport class EffectsRunner implements OnDestroy {\n  private effectsSubscription: Subscription | null = null;\n\n  constructor(\n    private effectSources: EffectSources,\n    private store: Store<any>\n  ) {}\n\n  start() {\n    if (!this.effectsSubscription) {\n      this.effectsSubscription = this.effectSources\n        .toActions()\n        .subscribe(this.store);\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.effectsSubscription) {\n      this.effectsSubscription.unsubscribe();\n      this.effectsSubscription = null;\n    }\n  }\n}\n","import { NgModule, Inject, Optional } from '@angular/core';\nimport {\n  StoreModule,\n  Store,\n  StoreRootModule,\n  StoreFeatureModule,\n} from '@ngrx/store';\nimport { EffectsRunner } from './effects_runner';\nimport { EffectSources } from './effect_sources';\nimport { ROOT_EFFECTS } from './tokens';\n\nexport const ROOT_EFFECTS_INIT = '@ngrx/effects/init';\n\n@NgModule({})\nexport class EffectsRootModule {\n  constructor(\n    private sources: EffectSources,\n    runner: EffectsRunner,\n    store: Store<any>,\n    @Inject(ROOT_EFFECTS) rootEffects: any[],\n    @Optional() storeRootModule: StoreRootModule,\n    @Optional() storeFeatureModule: StoreFeatureModule\n  ) {\n    runner.start();\n\n    rootEffects.forEach(effectSourceInstance =>\n      sources.addEffects(effectSourceInstance)\n    );\n\n    store.dispatch({ type: ROOT_EFFECTS_INIT });\n  }\n\n  addEffects(effectSourceInstance: any) {\n    this.sources.addEffects(effectSourceInstance);\n  }\n}\n","import { NgModule, Inject, Optional } from '@angular/core';\nimport { StoreRootModule, StoreFeatureModule } from '@ngrx/store';\nimport { EffectsRootModule } from './effects_root_module';\nimport { FEATURE_EFFECTS } from './tokens';\n\n@NgModule({})\nexport class EffectsFeatureModule {\n  constructor(\n    root: EffectsRootModule,\n    @Inject(FEATURE_EFFECTS) effectSourceGroups: any[][],\n    @Optional() storeRootModule: StoreRootModule,\n    @Optional() storeFeatureModule: StoreFeatureModule\n  ) {\n    effectSourceGroups.forEach(group =>\n      group.forEach(effectSourceInstance =>\n        root.addEffects(effectSourceInstance)\n      )\n    );\n  }\n}\n","import { NgModule, ModuleWithProviders, Type } from '@angular/core';\nimport { EffectSources } from './effect_sources';\nimport { Actions } from './actions';\nimport { ROOT_EFFECTS, FEATURE_EFFECTS } from './tokens';\nimport { EffectsFeatureModule } from './effects_feature_module';\nimport { EffectsRootModule } from './effects_root_module';\nimport { EffectsRunner } from './effects_runner';\n\n@NgModule({})\nexport class EffectsModule {\n  static forFeature(\n    featureEffects: Type<any>[]\n  ): ModuleWithProviders<EffectsFeatureModule> {\n    return {\n      ngModule: EffectsFeatureModule,\n      providers: [\n        featureEffects,\n        {\n          provide: FEATURE_EFFECTS,\n          multi: true,\n          deps: featureEffects,\n          useFactory: createSourceInstances,\n        },\n      ],\n    };\n  }\n\n  static forRoot(\n    rootEffects: Type<any>[]\n  ): ModuleWithProviders<EffectsRootModule> {\n    return {\n      ngModule: EffectsRootModule,\n      providers: [\n        EffectsRunner,\n        EffectSources,\n        Actions,\n        rootEffects,\n        {\n          provide: ROOT_EFFECTS,\n          deps: rootEffects,\n          useFactory: createSourceInstances,\n        },\n      ],\n    };\n  }\n}\n\nexport function createSourceInstances(...instances: any[]) {\n  return instances;\n}\n","/**\n * DO NOT EDIT\n *\n * This file is automatically generated at build\n */\n\nexport * from './public_api';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {EffectsFeatureModule as Éµngrx_modules_effects_effects_c} from './src/effects_feature_module';\nexport {createSourceInstances as Éµngrx_modules_effects_effects_a} from './src/effects_module';\nexport {EffectsRootModule as Éµngrx_modules_effects_effects_b} from './src/effects_root_module';\nexport {EffectsRunner as Éµngrx_modules_effects_effects_f} from './src/effects_runner';\nexport {FEATURE_EFFECTS as Éµngrx_modules_effects_effects_e,ROOT_EFFECTS as Éµngrx_modules_effects_effects_d} from './src/tokens';"],"names":["__extends","__param"],"mappings":"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"}