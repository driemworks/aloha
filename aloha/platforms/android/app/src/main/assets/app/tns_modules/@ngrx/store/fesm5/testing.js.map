{"version":3,"file":"testing.js","sources":["../../../../../../modules/store/testing/src/mock_state.ts","../../../../../../modules/store/testing/src/mock_store.ts","../../../../../../modules/store/testing/src/mock_reducer_manager.ts","../../../../../../modules/store/testing/src/testing.ts","../../../../../../modules/store/testing/testing.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable()\nexport class MockState<T extends {}> extends BehaviorSubject<T> {\n  constructor() {\n    super(<T>{});\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport {\n  Action,\n  ActionsSubject,\n  INITIAL_STATE,\n  ReducerManager,\n  Store,\n} from '@ngrx/store';\nimport { MockState } from './mock_state';\n\n@Injectable()\nexport class MockStore<T> extends Store<T> {\n  public scannedActions$: Observable<Action>;\n\n  constructor(\n    private state$: MockState<T>,\n    actionsObserver: ActionsSubject,\n    reducerManager: ReducerManager,\n    @Inject(INITIAL_STATE) private initialState: T\n  ) {\n    super(state$, actionsObserver, reducerManager);\n    this.state$.next(this.initialState);\n    this.scannedActions$ = actionsObserver.asObservable();\n  }\n\n  setState(nextState: T): void {\n    this.state$.next(nextState);\n  }\n\n  addReducer() {\n    /* noop */\n  }\n\n  removeReducer() {\n    /* noop */\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { ActionReducer } from '@ngrx/store';\n\n@Injectable()\nexport class MockReducerManager extends BehaviorSubject<\n  ActionReducer<any, any>\n> {\n  constructor() {\n    super(() => undefined);\n  }\n}\n","import { Provider } from '@angular/core';\nimport { MockState } from './mock_state';\nimport {\n  ActionsSubject,\n  INITIAL_STATE,\n  ReducerManager,\n  StateObservable,\n  Store,\n} from '@ngrx/store';\nimport { MockStore } from './mock_store';\nimport { MockReducerManager } from './mock_reducer_manager';\n\nexport interface MockStoreConfig<T> {\n  initialState?: T;\n}\n\nexport function provideMockStore<T = any>(\n  config: MockStoreConfig<T> = {}\n): Provider[] {\n  return [\n    ActionsSubject,\n    MockState,\n    { provide: INITIAL_STATE, useValue: config.initialState },\n    { provide: StateObservable, useClass: MockState },\n    { provide: ReducerManager, useClass: MockReducerManager },\n    { provide: Store, useClass: MockStore },\n  ];\n}\n\nexport { MockReducerManager } from './mock_reducer_manager';\nexport { MockState } from './mock_state';\nexport { MockStore } from './mock_store';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["__extends"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;IAI6C,6BAAkB;IAC7D;eACE,kBAAS,EAAE,CAAC;KACb;IAHU,SAAS;QADrB,UAAU,EAAE;;OACA,SAAS,CAIrB;IAAD,gBAAC;CAAA,CAJ4C,eAAe;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJ5D;IAYkCA,+BAAQ;IAGxC,mBACU,MAAoB,EAC5B,eAA+B,EAC/B,cAA8B,EACC,YAAe;QAJhD,YAME,kBAAM,MAAM,EAAE,eAAe,EAAE,cAAc,CAAC,SAG/C;QARS,YAAM,GAAN,MAAM,CAAc;QAGG,kBAAY,GAAZ,YAAY,CAAG;QAG9C,KAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAI,CAAC,YAAY,CAAC,CAAC;QACpC,KAAI,CAAC,eAAe,GAAG,eAAe,CAAC,YAAY,EAAE,CAAC;;KACvD;IAED,4BAAQ,GAAR,UAAS,SAAY;QACnB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;KAC7B;IAED,8BAAU,GAAV;;KAEC;IAED,iCAAa,GAAb;;KAEC;IAxBU,SAAS;QADrB,UAAU,EAAE;QAQR,WAAA,MAAM,CAAC,aAAa,CAAC,CAAA;2CAHN,SAAS;YACR,cAAc;YACf,cAAc;OANrB,SAAS,CAyBrB;IAAD,gBAAC;CAAA,CAzBiC,KAAK;;;;;;;;;;;;;;;;;;;;;;;;ACZvC;IAKwCA,wCAEvC;IACC;eACE,kBAAM,cAAM,OAAA,SAAS,GAAA,CAAC;KACvB;IALU,kBAAkB;QAD9B,UAAU,EAAE;;OACA,kBAAkB,CAM9B;IAAD,yBAAC;CAAA,CANuC,eAAe;;SCWvC,gBAAgB,CAC9B,MAA+B;IAA/B,uBAAA,EAAA,WAA+B;IAE/B,OAAO;QACL,cAAc;QACd,SAAS;QACT,EAAE,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,MAAM,CAAC,YAAY,EAAE;QACzD,EAAE,OAAO,EAAE,eAAe,EAAE,QAAQ,EAAE,SAAS,EAAE;QACjD,EAAE,OAAO,EAAE,cAAc,EAAE,QAAQ,EAAE,kBAAkB,EAAE;QACzD,EAAE,OAAO,EAAE,KAAK,EAAE,QAAQ,EAAE,SAAS,EAAE;KACxC,CAAC;CACH;;AC3BD;;GAEG;;;;"}