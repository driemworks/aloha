"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var http_1 = require("@angular/common/http");
var core_1 = require("@angular/core");
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
var md5_1 = require("ts-md5/dist/md5");
var HueService = /** @class */ (function () {
    function HueService(httpClient) {
        this.httpClient = httpClient;
        // remote api urls are like this.
        this.remoteApiBaseUrl = 'https://api.meethue.com/bridge';
    }
    HueService.prototype.createUser = function (bridgeIp) {
        var url = "http://" + bridgeIp + "/api/";
        return this.postApi(url, { 'devicetype': 'aloha#' }, null);
    };
    HueService.prototype.getTokenCode = function () {
        // todo 
        var url = 'https://account.meethue.com/get-token/?client_id=k4ADndV7XhGKLPlGDwROqZYb1YeO2Eff&response_type=code&state=xUvdhs&devicename=LGD85095b7d552&appid=aloha&deviceid=001788fffe662a1c&redirect_url_base=80%3A%2F%2F_&app_name=Aloha';
    };
    HueService.prototype.getAccessToken = function (code) {
        var url = "https://api.meethue.com/oauth2/token?code=" + code + "&grant_type=authorization_code";
        var authString = "Basic azRBRG5kVjdYaEdLTFBsR0R3Uk9xWlliMVllTzJFZmY6N2xoR0FlQUowa0o5R3NGRg==";
        console.log('Using: ' + authString);
        var headers = new http_1.HttpHeaders({ 'Authorization': authString });
        return this.postApi(url, {}, headers);
    };
    HueService.prototype.calculateResponse = function (clientId, clientSecret, nonce) {
        // response = MD5(HASH1 + ':' + 'NONCE' + ':' + HASH2')
        // where HASH1 = MD5('CLIENTID' + ':' + 'REALM' + ':' + 'CLIENTSECRET')
        // and   HASH2 = MD5('VERB' + ':' + 'PATH')
        var HASH1 = md5_1.Md5.hashStr(clientId + ': oauth2_client@api.meethue.com : ' + clientSecret);
        var HASH2 = md5_1.Md5.hashStr('POST : /oauth2/token');
        return md5_1.Md5.hashStr(HASH1 + ':' + nonce + ':' + HASH2);
    };
    HueService.prototype.findBridgeIp = function () {
        // internalipaddress
        var url = 'https://www.meethue.com/api/nupnp';
        return this.getApi(url, {});
    };
    HueService.prototype.getScenes = function (bridgeIp, username) {
        var url = "http://" + bridgeIp + "/api/" + username + "/scenes";
        return this.getApi(url, null);
    };
    HueService.prototype.setGroupState = function (bridgeIp, username, groupId, groupState, accessToken) {
        var url = '';
        var headers = { 'Content-Type': 'application/json',
            'Authorization': "Bearer " + accessToken };
        if (!accessToken) {
            url = "http://" + bridgeIp + "/api/" + username + "/groups/" + groupId + "/action";
        }
        else {
            url = ('https://api.meethue.com/bridge/dOBMZLQEqwc08ab2saX8UT60qBv6vRPHTWi-2wi1/groups/' + groupId + '/action').toString();
        }
        return this.putApi(url, groupState, headers);
    };
    HueService.prototype.putApi = function (url, content, headers) {
        console.log('PUT ' + url);
        return this.httpClient.put(url, content, { headers: headers })
            .pipe(operators_1.map(function (res) {
            if (res) {
                return res;
            }
            return JSON.parse('[ERR]');
        }));
    };
    HueService.prototype.postApi = function (url, content, headers) {
        console.log('POST ' + url);
        return this.httpClient.post(url, content, { headers: headers })
            .pipe(operators_1.map(function (res) {
            if (res) {
                return res;
            }
            else {
                return JSON.parse('[ERR]');
            }
        }));
    };
    HueService.prototype.getApi = function (url, headers) {
        return this.httpClient.get(url, { headers: headers })
            .pipe(operators_1.map(function (res) {
            if (res) {
                return res;
            }
            return JSON.parse('[ERR]');
        }), operators_1.retry(1), operators_1.catchError(this.handleError));
    };
    HueService.prototype.handleError = function (err) {
        // TODO
        console.log('AN ERROR OCCURRED!');
        console.log(err);
        return rxjs_1.throwError(err);
    };
    HueService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [http_1.HttpClient])
    ], HueService);
    return HueService;
}());
exports.HueService = HueService;
//# sourceMappingURL=data:application/json;base64,