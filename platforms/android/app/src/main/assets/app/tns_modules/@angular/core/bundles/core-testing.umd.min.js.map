{"version":3,"sources":["packages/core/core-testing.umd.js"],"names":["global","factory","exports","module","require","define","amd","ng","core","testing","this","_global","window","runInTestZone","fn","context","finishCallback","failCallback","currentZone","Zone","current","AsyncTestZoneSpec","undefined","Error","ProxyZoneSpec","proxyZoneSpec","get","assertPresent","proxyZone","getZoneWith","previousDelegate","getDelegate","parent","run","testZoneSpec","setDelegate","error","runGuarded","ComponentFixture","componentRef","ngZone","_autoDetect","_this","_isStable","_isDestroyed","_resolve","_promise","_onUnstableSubscription","_onStableSubscription","_onMicrotaskEmptySubscription","_onErrorSubscription","changeDetectorRef","elementRef","location","debugElement","getDebugNode","nativeElement","componentInstance","instance","runOutsideAngular","onUnstable","subscribe","next","onMicrotaskEmpty","detectChanges","onStable","scheduleMicroTask","hasPendingMacrotasks","onError","prototype","_tick","checkNoChanges","autoDetectChanges","autoDetect","isStable","whenStable","Promise","resolve","res","_getRenderer","_renderer","injector","RendererFactory2","whenRenderingDone","renderer","destroy","unsubscribe","_Zone","FakeAsyncTestZoneSpec","_fakeAsyncTestZoneSpec","resetFakeAsyncZoneFallback","resetDelegate","_inFakeAsyncCall","_getFakeAsyncZoneSpec","flushMicrotasksFallback","flushMicrotasks","_Zone$1","fakeAsyncTestModule","__symbol__","resetFakeAsyncZone","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__values","o","m","Symbol","iterator","call","value","done","__read","n","e","ar","push","__spread","concat","AsyncTestCompleter","rej","_reject","fail","stackTrace","enumerable","configurable","_nextReferenceId","MetadataOverrider","_references","Map","overrideMetadata","metadataClass","oldMetadata","override","props","_valueProps","obj","keys","forEach","prop","startsWith","proto","getPrototypeOf","protoProp","set","remove","add","ɵstringify","setMetadata","metadata","removeMetadata","references","removeObjects","Set","_loop_1","removeValue","_propHashKey","_loop_2","propValue","filter","has","addMetadata","addValue","propName","JSON","stringify","_serializeReference","ref","id","testBed","reflection","ɵReflectionCapabilities","OverrideResolver","overrides","resolved","setOverrides","clear","_a","_b","getAnnotation","type","annotations","find","a","DirectiveResolver","_super","apply","Directive","ComponentResolver","Component","PipeResolver","Pipe","NgModuleResolver","NgModule","TestComponentRenderer","insertRootElement","rootElementId","ComponentFixtureAutoDetect","InjectionToken","ComponentFixtureNoNgZone","_nextRootElementId","TestBedRender3","platform","ngModule","_moduleOverrides","_componentOverrides","_directiveOverrides","_pipeOverrides","_providerOverrides","_rootProviderOverrides","_providers","_declarations","_imports","_schemas","_activeFixtures","_moduleRef","_instantiated","initTestEnvironment","aotSummaries","_getTestBedRender3","resetTestEnvironment","configureCompiler","config","configureTestingModule","moduleDef","compileComponents","overrideModule","overrideComponent","component","overrideDirective","directive","overridePipe","pipe","overrideTemplate","template","templateUrl","overrideTemplateUsingTestingModule","overrideProvider","token","provider","deprecatedOverrideProvider","notFoundValue","Injector","THROW_IF_NOT_FOUND","createComponent","resetTestingModule","fixture","console","stacktrace","useJit","providers","_c","_d","_assertNotInstantiated","declarations","imports","schemas","_initIfNeeded","execute","tokens","params","map","t","injectableDef","ɵgetInjectableDef","providedIn","useFactory","provide","deps","useValue","testComponentRenderer","rootElId","componentDef","ngComponentDef","noNgZone","NgZone","componentFactory","ɵRender3ComponentFactory","initComponent","NULL","resolvers","_getResolvers","testModuleType","_createTestModule","compileNgModule","moduleType","ɵcompileNgModuleDefs","compiledComponents","flatten","values","out","isArray","EMPTY_ARRAY","declaration","ɵcompileComponent","ɵcompileDirective","ɵcompilePipe","transitiveScope","transitiveScopesFor","isNgModule","name","def","ngModuleDef","transitiveCompileScopes","scopes","compilation","directives","pipes","exported","declared","ngPipeDef","imported","importedScope","entry","exportedTyped","exportedScope","cmp","ɵpatchComponentDefWithScope","ɵRender3NgModuleRef","methodName","methodDescription","rootProviderOverrides","rendererFactoryWrapper","ɵWRAP_RENDERER_FACTORY2","rf","ɵRender3DebugRendererFactory2","RootScopeModule","jit","enableLongStackTrace","DynamicTestModule","unimplemented","testBed$1","TestingCompiler","loadAotSummaries","summaries","getComponentFactory","getComponentFromError","Injectable","Compiler","TestingCompilerFactory","UNDEFINED","_nextRootElementId$1","TestBedViewEngine","_compiler","_moduleFactory","_compilerOptions","_testEnvAotSummaries","_aotSummaries","_templateOverrides","_isRoot","_getTestBedViewEngine","getTestBed","ɵclearOverrides","_createCompilerAndModule","compileModuleAndAllComponentsAsync","then","moduleAndComponentFactories","ngModuleFactory","e_1","compileModuleAndAllComponentsSync","errorCompType","compFactory","templateOf","ɵoverrideComponentView","e_1_1","return","ngZoneInjector","ApplicationInitStatus","runInitializers","e_2","TestBed","rootScopeImports","ɵAPP_ROOT","compilerFactory","createTestingCompiler","e_2_1","result","overrideProviderImpl","deprecated","flags","dep","depToken","depFlags","Optional","SkipSelf","ɵoverrideProvider","deprecatedBehavior","OverrideComponent","selector","ɵivyEnabled","inject","indexOf","completer","promise","InjectSetupWrapper","_moduleDef","_addModule","self","_global$1","beforeEach","ɵangular_packages_core_testing_testing_b","ɵangular_packages_core_testing_testing_c","ɵangular_packages_core_testing_testing_a","withModule","ɵMetadataOverrider","async","reject","asyncTest","asyncFallback","jasmine","err","fakeAsync","fakeAsyncFallback","args","_i","lastProxyZoneSpec","pendingPeriodicTimers","pendingTimers","tick","millis","tickFallback","flush","maxTurns","flushFallback","discardPeriodicTasks","discardPeriodicTasksFallback","__core_private_testing_placeholder__","ɵTestingCompiler","ɵTestingCompilerFactory"],"mappings":"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","sourcesContent":["/**\n * @license Angular v7.1.4\n * (c) 2010-2018 Google, Inc. https://angular.io/\n * License: MIT\n */\n\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core')) :\n    typeof define === 'function' && define.amd ? define('@angular/core/testing', ['exports', '@angular/core'], factory) :\n    (factory((global.ng = global.ng || {}, global.ng.core = global.ng.core || {}, global.ng.core.testing = {}),global.ng.core));\n}(this, (function (exports,core) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var _global = (typeof window === 'undefined' ? global : window);\n    /**\n     * Wraps a test function in an asynchronous test zone. The test will automatically\n     * complete when all asynchronous calls within this zone are done. Can be used\n     * to wrap an {@link inject} call.\n     *\n     * Example:\n     *\n     * ```\n     * it('...', async(inject([AClass], (object) => {\n     *   object.doSomething.then(() => {\n     *     expect(...);\n     *   })\n     * });\n     * ```\n     *\n     *\n     */\n    function asyncFallback(fn) {\n        // If we're running using the Jasmine test framework, adapt to call the 'done'\n        // function when asynchronous activity is finished.\n        if (_global.jasmine) {\n            // Not using an arrow function to preserve context passed from call site\n            return function (done) {\n                if (!done) {\n                    // if we run beforeEach in @angular/core/testing/testing_internal then we get no done\n                    // fake it here and assume sync.\n                    done = function () { };\n                    done.fail = function (e) { throw e; };\n                }\n                runInTestZone(fn, this, done, function (err) {\n                    if (typeof err === 'string') {\n                        return done.fail(new Error(err));\n                    }\n                    else {\n                        done.fail(err);\n                    }\n                });\n            };\n        }\n        // Otherwise, return a promise which will resolve when asynchronous activity\n        // is finished. This will be correctly consumed by the Mocha framework with\n        // it('...', async(myFn)); or can be used in a custom framework.\n        // Not using an arrow function to preserve context passed from call site\n        return function () {\n            var _this = this;\n            return new Promise(function (finishCallback, failCallback) {\n                runInTestZone(fn, _this, finishCallback, failCallback);\n            });\n        };\n    }\n    function runInTestZone(fn, context, finishCallback, failCallback) {\n        var currentZone = Zone.current;\n        var AsyncTestZoneSpec = Zone['AsyncTestZoneSpec'];\n        if (AsyncTestZoneSpec === undefined) {\n            throw new Error('AsyncTestZoneSpec is needed for the async() test helper but could not be found. ' +\n                'Please make sure that your environment includes zone.js/dist/async-test.js');\n        }\n        var ProxyZoneSpec = Zone['ProxyZoneSpec'];\n        if (ProxyZoneSpec === undefined) {\n            throw new Error('ProxyZoneSpec is needed for the async() test helper but could not be found. ' +\n                'Please make sure that your environment includes zone.js/dist/proxy.js');\n        }\n        var proxyZoneSpec = ProxyZoneSpec.get();\n        ProxyZoneSpec.assertPresent();\n        // We need to create the AsyncTestZoneSpec outside the ProxyZone.\n        // If we do it in ProxyZone then we will get to infinite recursion.\n        var proxyZone = Zone.current.getZoneWith('ProxyZoneSpec');\n        var previousDelegate = proxyZoneSpec.getDelegate();\n        proxyZone.parent.run(function () {\n            var testZoneSpec = new AsyncTestZoneSpec(function () {\n                // Need to restore the original zone.\n                currentZone.run(function () {\n                    if (proxyZoneSpec.getDelegate() == testZoneSpec) {\n                        // Only reset the zone spec if it's sill this one. Otherwise, assume it's OK.\n                        proxyZoneSpec.setDelegate(previousDelegate);\n                    }\n                    finishCallback();\n                });\n            }, function (error) {\n                // Need to restore the original zone.\n                currentZone.run(function () {\n                    if (proxyZoneSpec.getDelegate() == testZoneSpec) {\n                        // Only reset the zone spec if it's sill this one. Otherwise, assume it's OK.\n                        proxyZoneSpec.setDelegate(previousDelegate);\n                    }\n                    failCallback(error);\n                });\n            }, 'test');\n            proxyZoneSpec.setDelegate(testZoneSpec);\n        });\n        return Zone.current.runGuarded(fn, context);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Wraps a test function in an asynchronous test zone. The test will automatically\n     * complete when all asynchronous calls within this zone are done. Can be used\n     * to wrap an {@link inject} call.\n     *\n     * Example:\n     *\n     * ```\n     * it('...', async(inject([AClass], (object) => {\n     *   object.doSomething.then(() => {\n     *     expect(...);\n     *   })\n     * });\n     * ```\n     *\n     * @publicApi\n     */\n    function async(fn) {\n        var _Zone = typeof Zone !== 'undefined' ? Zone : null;\n        if (!_Zone) {\n            return function () {\n                return Promise.reject('Zone is needed for the async() test helper but could not be found. ' +\n                    'Please make sure that your environment includes zone.js/dist/zone.js');\n            };\n        }\n        var asyncTest = _Zone && _Zone[_Zone.__symbol__('asyncTest')];\n        if (typeof asyncTest === 'function') {\n            return asyncTest(fn);\n        }\n        // not using new version of zone.js\n        // TODO @JiaLiPassion, remove this after all library updated to\n        // newest version of zone.js(0.8.25)\n        return asyncFallback(fn);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Fixture for debugging and testing a component.\n     *\n     * @publicApi\n     */\n    var ComponentFixture = /** @class */ (function () {\n        function ComponentFixture(componentRef, ngZone, _autoDetect) {\n            var _this = this;\n            this.componentRef = componentRef;\n            this.ngZone = ngZone;\n            this._autoDetect = _autoDetect;\n            this._isStable = true;\n            this._isDestroyed = false;\n            this._resolve = null;\n            this._promise = null;\n            this._onUnstableSubscription = null;\n            this._onStableSubscription = null;\n            this._onMicrotaskEmptySubscription = null;\n            this._onErrorSubscription = null;\n            this.changeDetectorRef = componentRef.changeDetectorRef;\n            this.elementRef = componentRef.location;\n            this.debugElement = core.getDebugNode(this.elementRef.nativeElement);\n            this.componentInstance = componentRef.instance;\n            this.nativeElement = this.elementRef.nativeElement;\n            this.componentRef = componentRef;\n            this.ngZone = ngZone;\n            if (ngZone) {\n                // Create subscriptions outside the NgZone so that the callbacks run oustide\n                // of NgZone.\n                ngZone.runOutsideAngular(function () {\n                    _this._onUnstableSubscription =\n                        ngZone.onUnstable.subscribe({ next: function () { _this._isStable = false; } });\n                    _this._onMicrotaskEmptySubscription = ngZone.onMicrotaskEmpty.subscribe({\n                        next: function () {\n                            if (_this._autoDetect) {\n                                // Do a change detection run with checkNoChanges set to true to check\n                                // there are no changes on the second run.\n                                _this.detectChanges(true);\n                            }\n                        }\n                    });\n                    _this._onStableSubscription = ngZone.onStable.subscribe({\n                        next: function () {\n                            _this._isStable = true;\n                            // Check whether there is a pending whenStable() completer to resolve.\n                            if (_this._promise !== null) {\n                                // If so check whether there are no pending macrotasks before resolving.\n                                // Do this check in the next tick so that ngZone gets a chance to update the state of\n                                // pending macrotasks.\n                                scheduleMicroTask(function () {\n                                    if (!ngZone.hasPendingMacrotasks) {\n                                        if (_this._promise !== null) {\n                                            _this._resolve(true);\n                                            _this._resolve = null;\n                                            _this._promise = null;\n                                        }\n                                    }\n                                });\n                            }\n                        }\n                    });\n                    _this._onErrorSubscription =\n                        ngZone.onError.subscribe({ next: function (error) { throw error; } });\n                });\n            }\n        }\n        ComponentFixture.prototype._tick = function (checkNoChanges) {\n            this.changeDetectorRef.detectChanges();\n            if (checkNoChanges) {\n                this.checkNoChanges();\n            }\n        };\n        /**\n         * Trigger a change detection cycle for the component.\n         */\n        ComponentFixture.prototype.detectChanges = function (checkNoChanges) {\n            var _this = this;\n            if (checkNoChanges === void 0) { checkNoChanges = true; }\n            if (this.ngZone != null) {\n                // Run the change detection inside the NgZone so that any async tasks as part of the change\n                // detection are captured by the zone and can be waited for in isStable.\n                this.ngZone.run(function () { _this._tick(checkNoChanges); });\n            }\n            else {\n                // Running without zone. Just do the change detection.\n                this._tick(checkNoChanges);\n            }\n        };\n        /**\n         * Do a change detection run to make sure there were no changes.\n         */\n        ComponentFixture.prototype.checkNoChanges = function () { this.changeDetectorRef.checkNoChanges(); };\n        /**\n         * Set whether the fixture should autodetect changes.\n         *\n         * Also runs detectChanges once so that any existing change is detected.\n         */\n        ComponentFixture.prototype.autoDetectChanges = function (autoDetect) {\n            if (autoDetect === void 0) { autoDetect = true; }\n            if (this.ngZone == null) {\n                throw new Error('Cannot call autoDetectChanges when ComponentFixtureNoNgZone is set');\n            }\n            this._autoDetect = autoDetect;\n            this.detectChanges();\n        };\n        /**\n         * Return whether the fixture is currently stable or has async tasks that have not been completed\n         * yet.\n         */\n        ComponentFixture.prototype.isStable = function () { return this._isStable && !this.ngZone.hasPendingMacrotasks; };\n        /**\n         * Get a promise that resolves when the fixture is stable.\n         *\n         * This can be used to resume testing after events have triggered asynchronous activity or\n         * asynchronous change detection.\n         */\n        ComponentFixture.prototype.whenStable = function () {\n            var _this = this;\n            if (this.isStable()) {\n                return Promise.resolve(false);\n            }\n            else if (this._promise !== null) {\n                return this._promise;\n            }\n            else {\n                this._promise = new Promise(function (res) { _this._resolve = res; });\n                return this._promise;\n            }\n        };\n        ComponentFixture.prototype._getRenderer = function () {\n            if (this._renderer === undefined) {\n                this._renderer = this.componentRef.injector.get(core.RendererFactory2, null);\n            }\n            return this._renderer;\n        };\n        /**\n          * Get a promise that resolves when the ui state is stable following animations.\n          */\n        ComponentFixture.prototype.whenRenderingDone = function () {\n            var renderer = this._getRenderer();\n            if (renderer && renderer.whenRenderingDone) {\n                return renderer.whenRenderingDone();\n            }\n            return this.whenStable();\n        };\n        /**\n         * Trigger component destruction.\n         */\n        ComponentFixture.prototype.destroy = function () {\n            if (!this._isDestroyed) {\n                this.componentRef.destroy();\n                if (this._onUnstableSubscription != null) {\n                    this._onUnstableSubscription.unsubscribe();\n                    this._onUnstableSubscription = null;\n                }\n                if (this._onStableSubscription != null) {\n                    this._onStableSubscription.unsubscribe();\n                    this._onStableSubscription = null;\n                }\n                if (this._onMicrotaskEmptySubscription != null) {\n                    this._onMicrotaskEmptySubscription.unsubscribe();\n                    this._onMicrotaskEmptySubscription = null;\n                }\n                if (this._onErrorSubscription != null) {\n                    this._onErrorSubscription.unsubscribe();\n                    this._onErrorSubscription = null;\n                }\n                this._isDestroyed = true;\n            }\n        };\n        return ComponentFixture;\n    }());\n    function scheduleMicroTask(fn) {\n        Zone.current.scheduleMicroTask('scheduleMicrotask', fn);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * fakeAsync has been moved to zone.js\n     * this file is for fallback in case old version of zone.js is used\n     */\n    var _Zone = typeof Zone !== 'undefined' ? Zone : null;\n    var FakeAsyncTestZoneSpec = _Zone && _Zone['FakeAsyncTestZoneSpec'];\n    var ProxyZoneSpec = _Zone && _Zone['ProxyZoneSpec'];\n    var _fakeAsyncTestZoneSpec = null;\n    /**\n     * Clears out the shared fake async zone for a test.\n     * To be called in a global `beforeEach`.\n     *\n     * @publicApi\n     */\n    function resetFakeAsyncZoneFallback() {\n        _fakeAsyncTestZoneSpec = null;\n        // in node.js testing we may not have ProxyZoneSpec in which case there is nothing to reset.\n        ProxyZoneSpec && ProxyZoneSpec.assertPresent().resetDelegate();\n    }\n    var _inFakeAsyncCall = false;\n    /**\n     * Wraps a function to be executed in the fakeAsync zone:\n     * - microtasks are manually executed by calling `flushMicrotasks()`,\n     * - timers are synchronous, `tick()` simulates the asynchronous passage of time.\n     *\n     * If there are any pending timers at the end of the function, an exception will be thrown.\n     *\n     * Can be used to wrap inject() calls.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * {@example core/testing/ts/fake_async.ts region='basic'}\n     *\n     * @param fn\n     * @returns The function wrapped to be executed in the fakeAsync zone\n     *\n     * @publicApi\n     */\n    function fakeAsyncFallback(fn) {\n        // Not using an arrow function to preserve context passed from call site\n        return function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            var proxyZoneSpec = ProxyZoneSpec.assertPresent();\n            if (_inFakeAsyncCall) {\n                throw new Error('fakeAsync() calls can not be nested');\n            }\n            _inFakeAsyncCall = true;\n            try {\n                if (!_fakeAsyncTestZoneSpec) {\n                    if (proxyZoneSpec.getDelegate() instanceof FakeAsyncTestZoneSpec) {\n                        throw new Error('fakeAsync() calls can not be nested');\n                    }\n                    _fakeAsyncTestZoneSpec = new FakeAsyncTestZoneSpec();\n                }\n                var res = void 0;\n                var lastProxyZoneSpec = proxyZoneSpec.getDelegate();\n                proxyZoneSpec.setDelegate(_fakeAsyncTestZoneSpec);\n                try {\n                    res = fn.apply(this, args);\n                    flushMicrotasksFallback();\n                }\n                finally {\n                    proxyZoneSpec.setDelegate(lastProxyZoneSpec);\n                }\n                if (_fakeAsyncTestZoneSpec.pendingPeriodicTimers.length > 0) {\n                    throw new Error(_fakeAsyncTestZoneSpec.pendingPeriodicTimers.length + \" \" +\n                        \"periodic timer(s) still in the queue.\");\n                }\n                if (_fakeAsyncTestZoneSpec.pendingTimers.length > 0) {\n                    throw new Error(_fakeAsyncTestZoneSpec.pendingTimers.length + \" timer(s) still in the queue.\");\n                }\n                return res;\n            }\n            finally {\n                _inFakeAsyncCall = false;\n                resetFakeAsyncZoneFallback();\n            }\n        };\n    }\n    function _getFakeAsyncZoneSpec() {\n        if (_fakeAsyncTestZoneSpec == null) {\n            throw new Error('The code should be running in the fakeAsync zone to call this function');\n        }\n        return _fakeAsyncTestZoneSpec;\n    }\n    /**\n     * Simulates the asynchronous passage of time for the timers in the fakeAsync zone.\n     *\n     * The microtasks queue is drained at the very start of this function and after any timer callback\n     * has been executed.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * {@example core/testing/ts/fake_async.ts region='basic'}\n     *\n     * @publicApi\n     */\n    function tickFallback(millis) {\n        if (millis === void 0) { millis = 0; }\n        _getFakeAsyncZoneSpec().tick(millis);\n    }\n    /**\n     * Simulates the asynchronous passage of time for the timers in the fakeAsync zone by\n     * draining the macrotask queue until it is empty. The returned value is the milliseconds\n     * of time that would have been elapsed.\n     *\n     * @param maxTurns\n     * @returns The simulated time elapsed, in millis.\n     *\n     * @publicApi\n     */\n    function flushFallback(maxTurns) {\n        return _getFakeAsyncZoneSpec().flush(maxTurns);\n    }\n    /**\n     * Discard all remaining periodic tasks.\n     *\n     * @publicApi\n     */\n    function discardPeriodicTasksFallback() {\n        var zoneSpec = _getFakeAsyncZoneSpec();\n        zoneSpec.pendingPeriodicTimers.length = 0;\n    }\n    /**\n     * Flush any pending microtasks.\n     *\n     * @publicApi\n     */\n    function flushMicrotasksFallback() {\n        _getFakeAsyncZoneSpec().flushMicrotasks();\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var _Zone$1 = typeof Zone !== 'undefined' ? Zone : null;\n    var fakeAsyncTestModule = _Zone$1 && _Zone$1[_Zone$1.__symbol__('fakeAsyncTest')];\n    /**\n     * Clears out the shared fake async zone for a test.\n     * To be called in a global `beforeEach`.\n     *\n     * @publicApi\n     */\n    function resetFakeAsyncZone() {\n        if (fakeAsyncTestModule) {\n            return fakeAsyncTestModule.resetFakeAsyncZone();\n        }\n        else {\n            return resetFakeAsyncZoneFallback();\n        }\n    }\n    /**\n     * Wraps a function to be executed in the fakeAsync zone:\n     * - microtasks are manually executed by calling `flushMicrotasks()`,\n     * - timers are synchronous, `tick()` simulates the asynchronous passage of time.\n     *\n     * If there are any pending timers at the end of the function, an exception will be thrown.\n     *\n     * Can be used to wrap inject() calls.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * {@example core/testing/ts/fake_async.ts region='basic'}\n     *\n     * @param fn\n     * @returns The function wrapped to be executed in the fakeAsync zone\n     *\n     * @publicApi\n     */\n    function fakeAsync(fn) {\n        if (fakeAsyncTestModule) {\n            return fakeAsyncTestModule.fakeAsync(fn);\n        }\n        else {\n            return fakeAsyncFallback(fn);\n        }\n    }\n    /**\n     * Simulates the asynchronous passage of time for the timers in the fakeAsync zone.\n     *\n     * The microtasks queue is drained at the very start of this function and after any timer callback\n     * has been executed.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * {@example core/testing/ts/fake_async.ts region='basic'}\n     *\n     * @publicApi\n     */\n    function tick(millis) {\n        if (millis === void 0) { millis = 0; }\n        if (fakeAsyncTestModule) {\n            return fakeAsyncTestModule.tick(millis);\n        }\n        else {\n            return tickFallback(millis);\n        }\n    }\n    /**\n     * Simulates the asynchronous passage of time for the timers in the fakeAsync zone by\n     * draining the macrotask queue until it is empty. The returned value is the milliseconds\n     * of time that would have been elapsed.\n     *\n     * @param maxTurns\n     * @returns The simulated time elapsed, in millis.\n     *\n     * @publicApi\n     */\n    function flush(maxTurns) {\n        if (fakeAsyncTestModule) {\n            return fakeAsyncTestModule.flush(maxTurns);\n        }\n        else {\n            return flushFallback(maxTurns);\n        }\n    }\n    /**\n     * Discard all remaining periodic tasks.\n     *\n     * @publicApi\n     */\n    function discardPeriodicTasks() {\n        if (fakeAsyncTestModule) {\n            return fakeAsyncTestModule.discardPeriodicTasks();\n        }\n        else {\n            discardPeriodicTasksFallback();\n        }\n    }\n    /**\n     * Flush any pending microtasks.\n     *\n     * @publicApi\n     */\n    function flushMicrotasks() {\n        if (fakeAsyncTestModule) {\n            return fakeAsyncTestModule.flushMicrotasks();\n        }\n        else {\n            return flushMicrotasksFallback();\n        }\n    }\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n    this file except in compliance with the License. You may obtain a copy of the\r\n    License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n    MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n    and limitations under the License.\r\n    ***************************************************************************** */\r\n    /* global Reflect, Promise */\r\n\r\n    var extendStatics = function(d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n\r\n    function __extends(d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    }\r\n\r\n    function __decorate(decorators, target, key, desc) {\r\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n    }\r\n\r\n    function __values(o) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n        if (m) return m.call(o);\r\n        return {\r\n            next: function () {\r\n                if (o && i >= o.length) o = void 0;\r\n                return { value: o && o[i++], done: !o };\r\n            }\r\n        };\r\n    }\r\n\r\n    function __read(o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    }\r\n\r\n    function __spread() {\r\n        for (var ar = [], i = 0; i < arguments.length; i++)\r\n            ar = ar.concat(__read(arguments[i]));\r\n        return ar;\r\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Injectable completer that allows signaling completion of an asynchronous test. Used internally.\n     */\n    var AsyncTestCompleter = /** @class */ (function () {\n        function AsyncTestCompleter() {\n            var _this = this;\n            this._promise = new Promise(function (res, rej) {\n                _this._resolve = res;\n                _this._reject = rej;\n            });\n        }\n        AsyncTestCompleter.prototype.done = function (value) { this._resolve(value); };\n        AsyncTestCompleter.prototype.fail = function (error, stackTrace) { this._reject(error); };\n        Object.defineProperty(AsyncTestCompleter.prototype, \"promise\", {\n            get: function () { return this._promise; },\n            enumerable: true,\n            configurable: true\n        });\n        return AsyncTestCompleter;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var _nextReferenceId = 0;\n    var MetadataOverrider = /** @class */ (function () {\n        function MetadataOverrider() {\n            this._references = new Map();\n        }\n        /**\n         * Creates a new instance for the given metadata class\n         * based on an old instance and overrides.\n         */\n        MetadataOverrider.prototype.overrideMetadata = function (metadataClass, oldMetadata, override) {\n            var props = {};\n            if (oldMetadata) {\n                _valueProps(oldMetadata).forEach(function (prop) { return props[prop] = oldMetadata[prop]; });\n            }\n            if (override.set) {\n                if (override.remove || override.add) {\n                    throw new Error(\"Cannot set and add/remove \" + core.ɵstringify(metadataClass) + \" at the same time!\");\n                }\n                setMetadata(props, override.set);\n            }\n            if (override.remove) {\n                removeMetadata(props, override.remove, this._references);\n            }\n            if (override.add) {\n                addMetadata(props, override.add);\n            }\n            return new metadataClass(props);\n        };\n        return MetadataOverrider;\n    }());\n    function removeMetadata(metadata, remove, references) {\n        var removeObjects = new Set();\n        var _loop_1 = function (prop) {\n            var removeValue = remove[prop];\n            if (removeValue instanceof Array) {\n                removeValue.forEach(function (value) { removeObjects.add(_propHashKey(prop, value, references)); });\n            }\n            else {\n                removeObjects.add(_propHashKey(prop, removeValue, references));\n            }\n        };\n        for (var prop in remove) {\n            _loop_1(prop);\n        }\n        var _loop_2 = function (prop) {\n            var propValue = metadata[prop];\n            if (propValue instanceof Array) {\n                metadata[prop] = propValue.filter(function (value) { return !removeObjects.has(_propHashKey(prop, value, references)); });\n            }\n            else {\n                if (removeObjects.has(_propHashKey(prop, propValue, references))) {\n                    metadata[prop] = undefined;\n                }\n            }\n        };\n        for (var prop in metadata) {\n            _loop_2(prop);\n        }\n    }\n    function addMetadata(metadata, add) {\n        for (var prop in add) {\n            var addValue = add[prop];\n            var propValue = metadata[prop];\n            if (propValue != null && propValue instanceof Array) {\n                metadata[prop] = propValue.concat(addValue);\n            }\n            else {\n                metadata[prop] = addValue;\n            }\n        }\n    }\n    function setMetadata(metadata, set) {\n        for (var prop in set) {\n            metadata[prop] = set[prop];\n        }\n    }\n    function _propHashKey(propName, propValue, references) {\n        var replacer = function (key, value) {\n            if (typeof value === 'function') {\n                value = _serializeReference(value, references);\n            }\n            return value;\n        };\n        return propName + \":\" + JSON.stringify(propValue, replacer);\n    }\n    function _serializeReference(ref, references) {\n        var id = references.get(ref);\n        if (!id) {\n            id = \"\" + core.ɵstringify(ref) + _nextReferenceId++;\n            references.set(ref, id);\n        }\n        return id;\n    }\n    function _valueProps(obj) {\n        var props = [];\n        // regular public props\n        Object.keys(obj).forEach(function (prop) {\n            if (!prop.startsWith('_')) {\n                props.push(prop);\n            }\n        });\n        // getters\n        var proto = obj;\n        while (proto = Object.getPrototypeOf(proto)) {\n            Object.keys(proto).forEach(function (protoProp) {\n                var desc = Object.getOwnPropertyDescriptor(proto, protoProp);\n                if (!protoProp.startsWith('_') && desc && 'get' in desc) {\n                    props.push(protoProp);\n                }\n            });\n        }\n        return props;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var reflection = new core.ɵReflectionCapabilities();\n    /**\n     * Allows to override ivy metadata for tests (via the `TestBed`).\n     */\n    var OverrideResolver = /** @class */ (function () {\n        function OverrideResolver() {\n            this.overrides = new Map();\n            this.resolved = new Map();\n        }\n        OverrideResolver.prototype.setOverrides = function (overrides) {\n            var _this = this;\n            this.overrides.clear();\n            overrides.forEach(function (_a) {\n                var _b = __read(_a, 2), type = _b[0], override = _b[1];\n                return _this.overrides.set(type, override);\n            });\n        };\n        OverrideResolver.prototype.getAnnotation = function (type) {\n            var _this = this;\n            return reflection.annotations(type).find(function (a) { return a instanceof _this.type; }) || null;\n        };\n        OverrideResolver.prototype.resolve = function (type) {\n            var resolved = this.resolved.get(type) || null;\n            if (!resolved) {\n                resolved = this.getAnnotation(type);\n                if (resolved) {\n                    var override = this.overrides.get(type);\n                    if (override) {\n                        var overrider = new MetadataOverrider();\n                        resolved = overrider.overrideMetadata(this.type, resolved, override);\n                    }\n                }\n                this.resolved.set(type, resolved);\n            }\n            return resolved;\n        };\n        return OverrideResolver;\n    }());\n    var DirectiveResolver = /** @class */ (function (_super) {\n        __extends(DirectiveResolver, _super);\n        function DirectiveResolver() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        Object.defineProperty(DirectiveResolver.prototype, \"type\", {\n            get: function () { return core.Directive; },\n            enumerable: true,\n            configurable: true\n        });\n        return DirectiveResolver;\n    }(OverrideResolver));\n    var ComponentResolver = /** @class */ (function (_super) {\n        __extends(ComponentResolver, _super);\n        function ComponentResolver() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        Object.defineProperty(ComponentResolver.prototype, \"type\", {\n            get: function () { return core.Component; },\n            enumerable: true,\n            configurable: true\n        });\n        return ComponentResolver;\n    }(OverrideResolver));\n    var PipeResolver = /** @class */ (function (_super) {\n        __extends(PipeResolver, _super);\n        function PipeResolver() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        Object.defineProperty(PipeResolver.prototype, \"type\", {\n            get: function () { return core.Pipe; },\n            enumerable: true,\n            configurable: true\n        });\n        return PipeResolver;\n    }(OverrideResolver));\n    var NgModuleResolver = /** @class */ (function (_super) {\n        __extends(NgModuleResolver, _super);\n        function NgModuleResolver() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        Object.defineProperty(NgModuleResolver.prototype, \"type\", {\n            get: function () { return core.NgModule; },\n            enumerable: true,\n            configurable: true\n        });\n        return NgModuleResolver;\n    }(OverrideResolver));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * An abstract class for inserting the root test component element in a platform independent way.\n     *\n     * @publicApi\n     */\n    var TestComponentRenderer = /** @class */ (function () {\n        function TestComponentRenderer() {\n        }\n        TestComponentRenderer.prototype.insertRootElement = function (rootElementId) { };\n        return TestComponentRenderer;\n    }());\n    /**\n     * @publicApi\n     */\n    var ComponentFixtureAutoDetect = new core.InjectionToken('ComponentFixtureAutoDetect');\n    /**\n     * @publicApi\n     */\n    var ComponentFixtureNoNgZone = new core.InjectionToken('ComponentFixtureNoNgZone');\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var _nextRootElementId = 0;\n    /**\n     * @description\n     * Configures and initializes environment for unit testing and provides methods for\n     * creating components and services in unit tests.\n     *\n     * TestBed is the primary api for writing unit tests for Angular applications and libraries.\n     *\n     * Note: Use `TestBed` in tests. It will be set to either `TestBedViewEngine` or `TestBedRender3`\n     * according to the compiler used.\n     */\n    var TestBedRender3 = /** @class */ (function () {\n        function TestBedRender3() {\n            // Properties\n            this.platform = null;\n            this.ngModule = null;\n            // metadata overrides\n            this._moduleOverrides = [];\n            this._componentOverrides = [];\n            this._directiveOverrides = [];\n            this._pipeOverrides = [];\n            this._providerOverrides = [];\n            this._rootProviderOverrides = [];\n            // test module configuration\n            this._providers = [];\n            this._declarations = [];\n            this._imports = [];\n            this._schemas = [];\n            this._activeFixtures = [];\n            this._moduleRef = null;\n            this._instantiated = false;\n        }\n        /**\n         * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n         * angular module. These are common to every test in the suite.\n         *\n         * This may only be called once, to set up the common providers for the current test\n         * suite on the current platform. If you absolutely need to change the providers,\n         * first use `resetTestEnvironment`.\n         *\n         * Test modules and platforms for individual platforms are available from\n         * '@angular/<platform_name>/testing'.\n         *\n         * @publicApi\n         */\n        TestBedRender3.initTestEnvironment = function (ngModule, platform, aotSummaries) {\n            var testBed = _getTestBedRender3();\n            testBed.initTestEnvironment(ngModule, platform, aotSummaries);\n            return testBed;\n        };\n        /**\n         * Reset the providers for the test injector.\n         *\n         * @publicApi\n         */\n        TestBedRender3.resetTestEnvironment = function () { _getTestBedRender3().resetTestEnvironment(); };\n        TestBedRender3.configureCompiler = function (config) {\n            _getTestBedRender3().configureCompiler(config);\n            return TestBedRender3;\n        };\n        /**\n         * Allows overriding default providers, directives, pipes, modules of the test injector,\n         * which are defined in test_injector.js\n         */\n        TestBedRender3.configureTestingModule = function (moduleDef) {\n            _getTestBedRender3().configureTestingModule(moduleDef);\n            return TestBedRender3;\n        };\n        /**\n         * Compile components with a `templateUrl` for the test's NgModule.\n         * It is necessary to call this function\n         * as fetching urls is asynchronous.\n         */\n        TestBedRender3.compileComponents = function () { return _getTestBedRender3().compileComponents(); };\n        TestBedRender3.overrideModule = function (ngModule, override) {\n            _getTestBedRender3().overrideModule(ngModule, override);\n            return TestBedRender3;\n        };\n        TestBedRender3.overrideComponent = function (component, override) {\n            _getTestBedRender3().overrideComponent(component, override);\n            return TestBedRender3;\n        };\n        TestBedRender3.overrideDirective = function (directive, override) {\n            _getTestBedRender3().overrideDirective(directive, override);\n            return TestBedRender3;\n        };\n        TestBedRender3.overridePipe = function (pipe, override) {\n            _getTestBedRender3().overridePipe(pipe, override);\n            return TestBedRender3;\n        };\n        TestBedRender3.overrideTemplate = function (component, template) {\n            _getTestBedRender3().overrideComponent(component, { set: { template: template, templateUrl: null } });\n            return TestBedRender3;\n        };\n        /**\n         * Overrides the template of the given component, compiling the template\n         * in the context of the TestingModule.\n         *\n         * Note: This works for JIT and AOTed components as well.\n         */\n        TestBedRender3.overrideTemplateUsingTestingModule = function (component, template) {\n            _getTestBedRender3().overrideTemplateUsingTestingModule(component, template);\n            return TestBedRender3;\n        };\n        TestBedRender3.prototype.overrideTemplateUsingTestingModule = function (component, template) {\n            throw new Error('Render3TestBed.overrideTemplateUsingTestingModule is not implemented yet');\n        };\n        TestBedRender3.overrideProvider = function (token, provider) {\n            _getTestBedRender3().overrideProvider(token, provider);\n            return TestBedRender3;\n        };\n        TestBedRender3.deprecatedOverrideProvider = function (token, provider) {\n            throw new Error('Render3TestBed.deprecatedOverrideProvider is not implemented');\n        };\n        TestBedRender3.get = function (token, notFoundValue) {\n            if (notFoundValue === void 0) { notFoundValue = core.Injector.THROW_IF_NOT_FOUND; }\n            return _getTestBedRender3().get(token, notFoundValue);\n        };\n        TestBedRender3.createComponent = function (component) {\n            return _getTestBedRender3().createComponent(component);\n        };\n        TestBedRender3.resetTestingModule = function () {\n            _getTestBedRender3().resetTestingModule();\n            return TestBedRender3;\n        };\n        /**\n         * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n         * angular module. These are common to every test in the suite.\n         *\n         * This may only be called once, to set up the common providers for the current test\n         * suite on the current platform. If you absolutely need to change the providers,\n         * first use `resetTestEnvironment`.\n         *\n         * Test modules and platforms for individual platforms are available from\n         * '@angular/<platform_name>/testing'.\n         *\n         * @publicApi\n         */\n        TestBedRender3.prototype.initTestEnvironment = function (ngModule, platform, aotSummaries) {\n            if (this.platform || this.ngModule) {\n                throw new Error('Cannot set base providers because it has already been called');\n            }\n            this.platform = platform;\n            this.ngModule = ngModule;\n        };\n        /**\n         * Reset the providers for the test injector.\n         *\n         * @publicApi\n         */\n        TestBedRender3.prototype.resetTestEnvironment = function () {\n            this.resetTestingModule();\n            this.platform = null;\n            this.ngModule = null;\n        };\n        TestBedRender3.prototype.resetTestingModule = function () {\n            // reset metadata overrides\n            this._moduleOverrides = [];\n            this._componentOverrides = [];\n            this._directiveOverrides = [];\n            this._pipeOverrides = [];\n            this._providerOverrides = [];\n            this._rootProviderOverrides = [];\n            // reset test module config\n            this._providers = [];\n            this._declarations = [];\n            this._imports = [];\n            this._schemas = [];\n            this._moduleRef = null;\n            this._instantiated = false;\n            this._activeFixtures.forEach(function (fixture) {\n                try {\n                    fixture.destroy();\n                }\n                catch (e) {\n                    console.error('Error during cleanup of component', {\n                        component: fixture.componentInstance,\n                        stacktrace: e,\n                    });\n                }\n            });\n            this._activeFixtures = [];\n        };\n        TestBedRender3.prototype.configureCompiler = function (config) {\n            var _a;\n            if (config.useJit != null) {\n                throw new Error('the Render3 compiler JiT mode is not configurable !');\n            }\n            if (config.providers) {\n                (_a = this._providerOverrides).push.apply(_a, __spread(config.providers));\n            }\n        };\n        TestBedRender3.prototype.configureTestingModule = function (moduleDef) {\n            var _a, _b, _c, _d;\n            this._assertNotInstantiated('R3TestBed.configureTestingModule', 'configure the test module');\n            if (moduleDef.providers) {\n                (_a = this._providers).push.apply(_a, __spread(moduleDef.providers));\n            }\n            if (moduleDef.declarations) {\n                (_b = this._declarations).push.apply(_b, __spread(moduleDef.declarations));\n            }\n            if (moduleDef.imports) {\n                (_c = this._imports).push.apply(_c, __spread(moduleDef.imports));\n            }\n            if (moduleDef.schemas) {\n                (_d = this._schemas).push.apply(_d, __spread(moduleDef.schemas));\n            }\n        };\n        TestBedRender3.prototype.compileComponents = function () {\n            // assume for now that components don't use templateUrl / stylesUrl to unblock further testing\n            // TODO(pk): plug into the ivy's resource fetching pipeline\n            return Promise.resolve();\n        };\n        TestBedRender3.prototype.get = function (token, notFoundValue) {\n            if (notFoundValue === void 0) { notFoundValue = core.Injector.THROW_IF_NOT_FOUND; }\n            this._initIfNeeded();\n            if (token === TestBedRender3) {\n                return this;\n            }\n            return this._moduleRef.injector.get(token, notFoundValue);\n        };\n        TestBedRender3.prototype.execute = function (tokens, fn, context) {\n            var _this = this;\n            this._initIfNeeded();\n            var params = tokens.map(function (t) { return _this.get(t); });\n            return fn.apply(context, params);\n        };\n        TestBedRender3.prototype.overrideModule = function (ngModule, override) {\n            this._assertNotInstantiated('overrideModule', 'override module metadata');\n            this._moduleOverrides.push([ngModule, override]);\n        };\n        TestBedRender3.prototype.overrideComponent = function (component, override) {\n            this._assertNotInstantiated('overrideComponent', 'override component metadata');\n            this._componentOverrides.push([component, override]);\n        };\n        TestBedRender3.prototype.overrideDirective = function (directive, override) {\n            this._assertNotInstantiated('overrideDirective', 'override directive metadata');\n            this._directiveOverrides.push([directive, override]);\n        };\n        TestBedRender3.prototype.overridePipe = function (pipe, override) {\n            this._assertNotInstantiated('overridePipe', 'override pipe metadata');\n            this._pipeOverrides.push([pipe, override]);\n        };\n        /**\n         * Overwrites all providers for the given token with the given provider definition.\n         */\n        TestBedRender3.prototype.overrideProvider = function (token, provider) {\n            var injectableDef;\n            var isRoot = (typeof token !== 'string' && (injectableDef = core.ɵgetInjectableDef(token)) &&\n                injectableDef.providedIn === 'root');\n            var overrides = isRoot ? this._rootProviderOverrides : this._providerOverrides;\n            if (provider.useFactory) {\n                overrides.push({ provide: token, useFactory: provider.useFactory, deps: provider.deps || [] });\n            }\n            else {\n                overrides.push({ provide: token, useValue: provider.useValue });\n            }\n        };\n        TestBedRender3.prototype.deprecatedOverrideProvider = function (token, provider) {\n            throw new Error('No implemented in IVY');\n        };\n        TestBedRender3.prototype.createComponent = function (type) {\n            var _this = this;\n            this._initIfNeeded();\n            var testComponentRenderer = this.get(TestComponentRenderer);\n            var rootElId = \"root\" + _nextRootElementId++;\n            testComponentRenderer.insertRootElement(rootElId);\n            var componentDef = type.ngComponentDef;\n            if (!componentDef) {\n                throw new Error(\"It looks like '\" + core.ɵstringify(type) + \"' has not been IVY compiled - it has no 'ngComponentDef' field\");\n            }\n            var noNgZone = this.get(ComponentFixtureNoNgZone, false);\n            var autoDetect = this.get(ComponentFixtureAutoDetect, false);\n            var ngZone = noNgZone ? null : this.get(core.NgZone, null);\n            var componentFactory = new core.ɵRender3ComponentFactory(componentDef);\n            var initComponent = function () {\n                var componentRef = componentFactory.create(core.Injector.NULL, [], \"#\" + rootElId, _this._moduleRef);\n                return new ComponentFixture(componentRef, ngZone, autoDetect);\n            };\n            var fixture = ngZone ? ngZone.run(initComponent) : initComponent();\n            this._activeFixtures.push(fixture);\n            return fixture;\n        };\n        // internal methods\n        TestBedRender3.prototype._initIfNeeded = function () {\n            if (this._instantiated) {\n                return;\n            }\n            var resolvers = this._getResolvers();\n            var testModuleType = this._createTestModule();\n            compileNgModule(testModuleType, resolvers);\n            var parentInjector = this.platform.injector;\n            this._moduleRef = new core.ɵRender3NgModuleRef(testModuleType, parentInjector);\n            this._instantiated = true;\n        };\n        // creates resolvers taking overrides into account\n        TestBedRender3.prototype._getResolvers = function () {\n            var module = new NgModuleResolver();\n            module.setOverrides(this._moduleOverrides);\n            var component = new ComponentResolver();\n            component.setOverrides(this._componentOverrides);\n            var directive = new DirectiveResolver();\n            directive.setOverrides(this._directiveOverrides);\n            var pipe = new PipeResolver();\n            pipe.setOverrides(this._pipeOverrides);\n            return { module: module, component: component, directive: directive, pipe: pipe };\n        };\n        TestBedRender3.prototype._assertNotInstantiated = function (methodName, methodDescription) {\n            if (this._instantiated) {\n                throw new Error(\"Cannot \" + methodDescription + \" when the test module has already been instantiated. \" +\n                    (\"Make sure you are not using `inject` before `\" + methodName + \"`.\"));\n            }\n        };\n        TestBedRender3.prototype._createTestModule = function () {\n            var rootProviderOverrides = this._rootProviderOverrides;\n            var rendererFactoryWrapper = {\n                provide: core.ɵWRAP_RENDERER_FACTORY2,\n                useFactory: function () { return function (rf) { return new core.ɵRender3DebugRendererFactory2(rf); }; },\n            };\n            var RootScopeModule = /** @class */ (function () {\n                function RootScopeModule() {\n                }\n                RootScopeModule = __decorate([\n                    core.NgModule({\n                        providers: __spread(rootProviderOverrides, [rendererFactoryWrapper]),\n                        jit: true,\n                    })\n                ], RootScopeModule);\n                return RootScopeModule;\n            }());\n            var ngZone = new core.NgZone({ enableLongStackTrace: true });\n            var providers = __spread([{ provide: core.NgZone, useValue: ngZone }], this._providers, this._providerOverrides);\n            var declarations = this._declarations;\n            var imports = [RootScopeModule, this.ngModule, this._imports];\n            var schemas = this._schemas;\n            var DynamicTestModule = /** @class */ (function () {\n                function DynamicTestModule() {\n                }\n                DynamicTestModule = __decorate([\n                    core.NgModule({ providers: providers, declarations: declarations, imports: imports, schemas: schemas, jit: true })\n                ], DynamicTestModule);\n                return DynamicTestModule;\n            }());\n            return DynamicTestModule;\n        };\n        return TestBedRender3;\n    }());\n    var testBed;\n    function _getTestBedRender3() {\n        return testBed = testBed || new TestBedRender3();\n    }\n    // Module compiler\n    var EMPTY_ARRAY = [];\n    function compileNgModule(moduleType, resolvers) {\n        var ngModule = resolvers.module.resolve(moduleType);\n        if (ngModule === null) {\n            throw new Error(core.ɵstringify(moduleType) + \" has not @NgModule annotation\");\n        }\n        core.ɵcompileNgModuleDefs(moduleType, ngModule);\n        var declarations = flatten(ngModule.declarations || EMPTY_ARRAY);\n        var compiledComponents = [];\n        // Compile the components, directives and pipes declared by this module\n        declarations.forEach(function (declaration) {\n            var component = resolvers.component.resolve(declaration);\n            if (component) {\n                core.ɵcompileComponent(declaration, component);\n                compiledComponents.push(declaration);\n                return;\n            }\n            var directive = resolvers.directive.resolve(declaration);\n            if (directive) {\n                core.ɵcompileDirective(declaration, directive);\n                return;\n            }\n            var pipe = resolvers.pipe.resolve(declaration);\n            if (pipe) {\n                core.ɵcompilePipe(declaration, pipe);\n                return;\n            }\n        });\n        // Compile transitive modules, components, directives and pipes\n        var transitiveScope = transitiveScopesFor(moduleType, resolvers);\n        compiledComponents.forEach(function (cmp) { return core.ɵpatchComponentDefWithScope(cmp.ngComponentDef, transitiveScope); });\n    }\n    /**\n     * Compute the pair of transitive scopes (compilation scope and exported scope) for a given module.\n     *\n     * This operation is memoized and the result is cached on the module's definition. It can be called\n     * on modules with components that have not fully compiled yet, but the result should not be used\n     * until they have.\n     */\n    function transitiveScopesFor(moduleType, resolvers) {\n        if (!isNgModule(moduleType)) {\n            throw new Error(moduleType.name + \" does not have an ngModuleDef\");\n        }\n        var def = moduleType.ngModuleDef;\n        if (def.transitiveCompileScopes !== null) {\n            return def.transitiveCompileScopes;\n        }\n        var scopes = {\n            compilation: {\n                directives: new Set(),\n                pipes: new Set(),\n            },\n            exported: {\n                directives: new Set(),\n                pipes: new Set(),\n            },\n        };\n        def.declarations.forEach(function (declared) {\n            var declaredWithDefs = declared;\n            if (declaredWithDefs.ngPipeDef !== undefined) {\n                scopes.compilation.pipes.add(declared);\n            }\n            else {\n                scopes.compilation.directives.add(declared);\n            }\n        });\n        def.imports.forEach(function (imported) {\n            var ngModule = resolvers.module.resolve(imported);\n            if (ngModule === null) {\n                throw new Error(\"Importing \" + imported.name + \" which does not have an @ngModule\");\n            }\n            else {\n                compileNgModule(imported, resolvers);\n            }\n            // When this module imports another, the imported module's exported directives and pipes are\n            // added to the compilation scope of this module.\n            var importedScope = transitiveScopesFor(imported, resolvers);\n            importedScope.exported.directives.forEach(function (entry) { return scopes.compilation.directives.add(entry); });\n            importedScope.exported.pipes.forEach(function (entry) { return scopes.compilation.pipes.add(entry); });\n        });\n        def.exports.forEach(function (exported) {\n            var exportedTyped = exported;\n            // Either the type is a module, a pipe, or a component/directive (which may not have an\n            // ngComponentDef as it might be compiled asynchronously).\n            if (isNgModule(exportedTyped)) {\n                // When this module exports another, the exported module's exported directives and pipes are\n                // added to both the compilation and exported scopes of this module.\n                var exportedScope = transitiveScopesFor(exportedTyped, resolvers);\n                exportedScope.exported.directives.forEach(function (entry) {\n                    scopes.compilation.directives.add(entry);\n                    scopes.exported.directives.add(entry);\n                });\n                exportedScope.exported.pipes.forEach(function (entry) {\n                    scopes.compilation.pipes.add(entry);\n                    scopes.exported.pipes.add(entry);\n                });\n            }\n            else if (exportedTyped.ngPipeDef !== undefined) {\n                scopes.exported.pipes.add(exportedTyped);\n            }\n            else {\n                scopes.exported.directives.add(exportedTyped);\n            }\n        });\n        def.transitiveCompileScopes = scopes;\n        return scopes;\n    }\n    function flatten(values) {\n        var out = [];\n        values.forEach(function (value) {\n            if (Array.isArray(value)) {\n                out.push.apply(out, __spread(flatten(value)));\n            }\n            else {\n                out.push(value);\n            }\n        });\n        return out;\n    }\n    function isNgModule(value) {\n        return value.ngModuleDef !== undefined;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function unimplemented() {\n        throw Error('unimplemented');\n    }\n    /**\n     * Special interface to the compiler only used by testing\n     *\n     * @publicApi\n     */\n    var TestingCompiler = /** @class */ (function (_super) {\n        __extends(TestingCompiler, _super);\n        function TestingCompiler() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        Object.defineProperty(TestingCompiler.prototype, \"injector\", {\n            get: function () { throw unimplemented(); },\n            enumerable: true,\n            configurable: true\n        });\n        TestingCompiler.prototype.overrideModule = function (module, overrides) {\n            throw unimplemented();\n        };\n        TestingCompiler.prototype.overrideDirective = function (directive, overrides) {\n            throw unimplemented();\n        };\n        TestingCompiler.prototype.overrideComponent = function (component, overrides) {\n            throw unimplemented();\n        };\n        TestingCompiler.prototype.overridePipe = function (directive, overrides) {\n            throw unimplemented();\n        };\n        /**\n         * Allows to pass the compile summary from AOT compilation to the JIT compiler,\n         * so that it can use the code generated by AOT.\n         */\n        TestingCompiler.prototype.loadAotSummaries = function (summaries) { throw unimplemented(); };\n        /**\n         * Gets the component factory for the given component.\n         * This assumes that the component has been compiled before calling this call using\n         * `compileModuleAndAllComponents*`.\n         */\n        TestingCompiler.prototype.getComponentFactory = function (component) { throw unimplemented(); };\n        /**\n         * Returns the component type that is stored in the given error.\n         * This can be used for errors created by compileModule...\n         */\n        TestingCompiler.prototype.getComponentFromError = function (error) { throw unimplemented(); };\n        TestingCompiler = __decorate([\n            core.Injectable()\n        ], TestingCompiler);\n        return TestingCompiler;\n    }(core.Compiler));\n    /**\n     * A factory for creating a Compiler\n     *\n     * @publicApi\n     */\n    var TestingCompilerFactory = /** @class */ (function () {\n        function TestingCompilerFactory() {\n        }\n        return TestingCompilerFactory;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var UNDEFINED = new Object();\n    var _nextRootElementId$1 = 0;\n    /**\n     * @description\n     * Configures and initializes environment for unit testing and provides methods for\n     * creating components and services in unit tests.\n     *\n     * `TestBed` is the primary api for writing unit tests for Angular applications and libraries.\n     *\n     * Note: Use `TestBed` in tests. It will be set to either `TestBedViewEngine` or `TestBedRender3`\n     * according to the compiler used.\n     */\n    var TestBedViewEngine = /** @class */ (function () {\n        function TestBedViewEngine() {\n            this._instantiated = false;\n            this._compiler = null;\n            this._moduleRef = null;\n            this._moduleFactory = null;\n            this._compilerOptions = [];\n            this._moduleOverrides = [];\n            this._componentOverrides = [];\n            this._directiveOverrides = [];\n            this._pipeOverrides = [];\n            this._providers = [];\n            this._declarations = [];\n            this._imports = [];\n            this._schemas = [];\n            this._activeFixtures = [];\n            this._testEnvAotSummaries = function () { return []; };\n            this._aotSummaries = [];\n            this._templateOverrides = [];\n            this._isRoot = true;\n            this._rootProviderOverrides = [];\n            this.platform = null;\n            this.ngModule = null;\n        }\n        /**\n         * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n         * angular module. These are common to every test in the suite.\n         *\n         * This may only be called once, to set up the common providers for the current test\n         * suite on the current platform. If you absolutely need to change the providers,\n         * first use `resetTestEnvironment`.\n         *\n         * Test modules and platforms for individual platforms are available from\n         * '@angular/<platform_name>/testing'.\n         *\n         * @publicApi\n         */\n        TestBedViewEngine.initTestEnvironment = function (ngModule, platform, aotSummaries) {\n            var testBed = _getTestBedViewEngine();\n            testBed.initTestEnvironment(ngModule, platform, aotSummaries);\n            return testBed;\n        };\n        /**\n         * Reset the providers for the test injector.\n         *\n         * @publicApi\n         */\n        TestBedViewEngine.resetTestEnvironment = function () { _getTestBedViewEngine().resetTestEnvironment(); };\n        TestBedViewEngine.resetTestingModule = function () {\n            _getTestBedViewEngine().resetTestingModule();\n            return TestBedViewEngine;\n        };\n        /**\n         * Allows overriding default compiler providers and settings\n         * which are defined in test_injector.js\n         */\n        TestBedViewEngine.configureCompiler = function (config) {\n            _getTestBedViewEngine().configureCompiler(config);\n            return TestBedViewEngine;\n        };\n        /**\n         * Allows overriding default providers, directives, pipes, modules of the test injector,\n         * which are defined in test_injector.js\n         */\n        TestBedViewEngine.configureTestingModule = function (moduleDef) {\n            _getTestBedViewEngine().configureTestingModule(moduleDef);\n            return TestBedViewEngine;\n        };\n        /**\n         * Compile components with a `templateUrl` for the test's NgModule.\n         * It is necessary to call this function\n         * as fetching urls is asynchronous.\n         */\n        TestBedViewEngine.compileComponents = function () { return getTestBed().compileComponents(); };\n        TestBedViewEngine.overrideModule = function (ngModule, override) {\n            _getTestBedViewEngine().overrideModule(ngModule, override);\n            return TestBedViewEngine;\n        };\n        TestBedViewEngine.overrideComponent = function (component, override) {\n            _getTestBedViewEngine().overrideComponent(component, override);\n            return TestBedViewEngine;\n        };\n        TestBedViewEngine.overrideDirective = function (directive, override) {\n            _getTestBedViewEngine().overrideDirective(directive, override);\n            return TestBedViewEngine;\n        };\n        TestBedViewEngine.overridePipe = function (pipe, override) {\n            _getTestBedViewEngine().overridePipe(pipe, override);\n            return TestBedViewEngine;\n        };\n        TestBedViewEngine.overrideTemplate = function (component, template) {\n            _getTestBedViewEngine().overrideComponent(component, { set: { template: template, templateUrl: null } });\n            return TestBedViewEngine;\n        };\n        /**\n         * Overrides the template of the given component, compiling the template\n         * in the context of the TestingModule.\n         *\n         * Note: This works for JIT and AOTed components as well.\n         */\n        TestBedViewEngine.overrideTemplateUsingTestingModule = function (component, template) {\n            _getTestBedViewEngine().overrideTemplateUsingTestingModule(component, template);\n            return TestBedViewEngine;\n        };\n        TestBedViewEngine.overrideProvider = function (token, provider) {\n            _getTestBedViewEngine().overrideProvider(token, provider);\n            return TestBedViewEngine;\n        };\n        TestBedViewEngine.deprecatedOverrideProvider = function (token, provider) {\n            _getTestBedViewEngine().deprecatedOverrideProvider(token, provider);\n            return TestBedViewEngine;\n        };\n        TestBedViewEngine.get = function (token, notFoundValue) {\n            if (notFoundValue === void 0) { notFoundValue = core.Injector.THROW_IF_NOT_FOUND; }\n            return _getTestBedViewEngine().get(token, notFoundValue);\n        };\n        TestBedViewEngine.createComponent = function (component) {\n            return _getTestBedViewEngine().createComponent(component);\n        };\n        /**\n         * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n         * angular module. These are common to every test in the suite.\n         *\n         * This may only be called once, to set up the common providers for the current test\n         * suite on the current platform. If you absolutely need to change the providers,\n         * first use `resetTestEnvironment`.\n         *\n         * Test modules and platforms for individual platforms are available from\n         * '@angular/<platform_name>/testing'.\n         *\n         * @publicApi\n         */\n        TestBedViewEngine.prototype.initTestEnvironment = function (ngModule, platform, aotSummaries) {\n            if (this.platform || this.ngModule) {\n                throw new Error('Cannot set base providers because it has already been called');\n            }\n            this.platform = platform;\n            this.ngModule = ngModule;\n            if (aotSummaries) {\n                this._testEnvAotSummaries = aotSummaries;\n            }\n        };\n        /**\n         * Reset the providers for the test injector.\n         *\n         * @publicApi\n         */\n        TestBedViewEngine.prototype.resetTestEnvironment = function () {\n            this.resetTestingModule();\n            this.platform = null;\n            this.ngModule = null;\n            this._testEnvAotSummaries = function () { return []; };\n        };\n        TestBedViewEngine.prototype.resetTestingModule = function () {\n            core.ɵclearOverrides();\n            this._aotSummaries = [];\n            this._templateOverrides = [];\n            this._compiler = null;\n            this._moduleOverrides = [];\n            this._componentOverrides = [];\n            this._directiveOverrides = [];\n            this._pipeOverrides = [];\n            this._isRoot = true;\n            this._rootProviderOverrides = [];\n            this._moduleRef = null;\n            this._moduleFactory = null;\n            this._compilerOptions = [];\n            this._providers = [];\n            this._declarations = [];\n            this._imports = [];\n            this._schemas = [];\n            this._instantiated = false;\n            this._activeFixtures.forEach(function (fixture) {\n                try {\n                    fixture.destroy();\n                }\n                catch (e) {\n                    console.error('Error during cleanup of component', {\n                        component: fixture.componentInstance,\n                        stacktrace: e,\n                    });\n                }\n            });\n            this._activeFixtures = [];\n        };\n        TestBedViewEngine.prototype.configureCompiler = function (config) {\n            this._assertNotInstantiated('TestBed.configureCompiler', 'configure the compiler');\n            this._compilerOptions.push(config);\n        };\n        TestBedViewEngine.prototype.configureTestingModule = function (moduleDef) {\n            var _a, _b, _c, _d;\n            this._assertNotInstantiated('TestBed.configureTestingModule', 'configure the test module');\n            if (moduleDef.providers) {\n                (_a = this._providers).push.apply(_a, __spread(moduleDef.providers));\n            }\n            if (moduleDef.declarations) {\n                (_b = this._declarations).push.apply(_b, __spread(moduleDef.declarations));\n            }\n            if (moduleDef.imports) {\n                (_c = this._imports).push.apply(_c, __spread(moduleDef.imports));\n            }\n            if (moduleDef.schemas) {\n                (_d = this._schemas).push.apply(_d, __spread(moduleDef.schemas));\n            }\n            if (moduleDef.aotSummaries) {\n                this._aotSummaries.push(moduleDef.aotSummaries);\n            }\n        };\n        TestBedViewEngine.prototype.compileComponents = function () {\n            var _this = this;\n            if (this._moduleFactory || this._instantiated) {\n                return Promise.resolve(null);\n            }\n            var moduleType = this._createCompilerAndModule();\n            return this._compiler.compileModuleAndAllComponentsAsync(moduleType)\n                .then(function (moduleAndComponentFactories) {\n                _this._moduleFactory = moduleAndComponentFactories.ngModuleFactory;\n            });\n        };\n        TestBedViewEngine.prototype._initIfNeeded = function () {\n            var e_1, _a;\n            if (this._instantiated) {\n                return;\n            }\n            if (!this._moduleFactory) {\n                try {\n                    var moduleType = this._createCompilerAndModule();\n                    this._moduleFactory =\n                        this._compiler.compileModuleAndAllComponentsSync(moduleType).ngModuleFactory;\n                }\n                catch (e) {\n                    var errorCompType = this._compiler.getComponentFromError(e);\n                    if (errorCompType) {\n                        throw new Error(\"This test module uses the component \" + core.ɵstringify(errorCompType) + \" which is using a \\\"templateUrl\\\" or \\\"styleUrls\\\", but they were never compiled. \" +\n                            \"Please call \\\"TestBed.compileComponents\\\" before your test.\");\n                    }\n                    else {\n                        throw e;\n                    }\n                }\n            }\n            try {\n                for (var _b = __values(this._templateOverrides), _c = _b.next(); !_c.done; _c = _b.next()) {\n                    var _d = _c.value, component = _d.component, templateOf = _d.templateOf;\n                    var compFactory = this._compiler.getComponentFactory(templateOf);\n                    core.ɵoverrideComponentView(component, compFactory);\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            var ngZone = new core.NgZone({ enableLongStackTrace: true });\n            var providers = [{ provide: core.NgZone, useValue: ngZone }];\n            var ngZoneInjector = core.Injector.create({\n                providers: providers,\n                parent: this.platform.injector,\n                name: this._moduleFactory.moduleType.name\n            });\n            this._moduleRef = this._moduleFactory.create(ngZoneInjector);\n            // ApplicationInitStatus.runInitializers() is marked @internal to core. So casting to any\n            // before accessing it.\n            this._moduleRef.injector.get(core.ApplicationInitStatus).runInitializers();\n            this._instantiated = true;\n        };\n        TestBedViewEngine.prototype._createCompilerAndModule = function () {\n            var _this = this;\n            var e_2, _a;\n            var providers = this._providers.concat([{ provide: TestBed, useValue: this }]);\n            var declarations = __spread(this._declarations, this._templateOverrides.map(function (entry) { return entry.templateOf; }));\n            var rootScopeImports = [];\n            var rootProviderOverrides = this._rootProviderOverrides;\n            if (this._isRoot) {\n                var RootScopeModule = /** @class */ (function () {\n                    function RootScopeModule() {\n                    }\n                    RootScopeModule = __decorate([\n                        core.NgModule({\n                            providers: __spread(rootProviderOverrides),\n                            jit: true,\n                        })\n                    ], RootScopeModule);\n                    return RootScopeModule;\n                }());\n                rootScopeImports.push(RootScopeModule);\n            }\n            providers.push({ provide: core.ɵAPP_ROOT, useValue: this._isRoot });\n            var imports = [rootScopeImports, this.ngModule, this._imports];\n            var schemas = this._schemas;\n            var DynamicTestModule = /** @class */ (function () {\n                function DynamicTestModule() {\n                }\n                DynamicTestModule = __decorate([\n                    core.NgModule({ providers: providers, declarations: declarations, imports: imports, schemas: schemas, jit: true })\n                ], DynamicTestModule);\n                return DynamicTestModule;\n            }());\n            var compilerFactory = this.platform.injector.get(TestingCompilerFactory);\n            this._compiler = compilerFactory.createTestingCompiler(this._compilerOptions);\n            try {\n                for (var _b = __values(__spread([this._testEnvAotSummaries], this._aotSummaries)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                    var summary = _c.value;\n                    this._compiler.loadAotSummaries(summary);\n                }\n            }\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                }\n                finally { if (e_2) throw e_2.error; }\n            }\n            this._moduleOverrides.forEach(function (entry) { return _this._compiler.overrideModule(entry[0], entry[1]); });\n            this._componentOverrides.forEach(function (entry) { return _this._compiler.overrideComponent(entry[0], entry[1]); });\n            this._directiveOverrides.forEach(function (entry) { return _this._compiler.overrideDirective(entry[0], entry[1]); });\n            this._pipeOverrides.forEach(function (entry) { return _this._compiler.overridePipe(entry[0], entry[1]); });\n            return DynamicTestModule;\n        };\n        TestBedViewEngine.prototype._assertNotInstantiated = function (methodName, methodDescription) {\n            if (this._instantiated) {\n                throw new Error(\"Cannot \" + methodDescription + \" when the test module has already been instantiated. \" +\n                    (\"Make sure you are not using `inject` before `\" + methodName + \"`.\"));\n            }\n        };\n        TestBedViewEngine.prototype.get = function (token, notFoundValue) {\n            if (notFoundValue === void 0) { notFoundValue = core.Injector.THROW_IF_NOT_FOUND; }\n            this._initIfNeeded();\n            if (token === TestBed) {\n                return this;\n            }\n            // Tests can inject things from the ng module and from the compiler,\n            // but the ng module can't inject things from the compiler and vice versa.\n            var result = this._moduleRef.injector.get(token, UNDEFINED);\n            return result === UNDEFINED ? this._compiler.injector.get(token, notFoundValue) : result;\n        };\n        TestBedViewEngine.prototype.execute = function (tokens, fn, context) {\n            var _this = this;\n            this._initIfNeeded();\n            var params = tokens.map(function (t) { return _this.get(t); });\n            return fn.apply(context, params);\n        };\n        TestBedViewEngine.prototype.overrideModule = function (ngModule, override) {\n            this._assertNotInstantiated('overrideModule', 'override module metadata');\n            this._moduleOverrides.push([ngModule, override]);\n        };\n        TestBedViewEngine.prototype.overrideComponent = function (component, override) {\n            this._assertNotInstantiated('overrideComponent', 'override component metadata');\n            this._componentOverrides.push([component, override]);\n        };\n        TestBedViewEngine.prototype.overrideDirective = function (directive, override) {\n            this._assertNotInstantiated('overrideDirective', 'override directive metadata');\n            this._directiveOverrides.push([directive, override]);\n        };\n        TestBedViewEngine.prototype.overridePipe = function (pipe, override) {\n            this._assertNotInstantiated('overridePipe', 'override pipe metadata');\n            this._pipeOverrides.push([pipe, override]);\n        };\n        TestBedViewEngine.prototype.overrideProvider = function (token, provider) {\n            this.overrideProviderImpl(token, provider);\n        };\n        TestBedViewEngine.prototype.deprecatedOverrideProvider = function (token, provider) {\n            this.overrideProviderImpl(token, provider, /* deprecated */ true);\n        };\n        TestBedViewEngine.prototype.overrideProviderImpl = function (token, provider, deprecated) {\n            if (deprecated === void 0) { deprecated = false; }\n            var def = null;\n            if (typeof token !== 'string' && (def = core.ɵgetInjectableDef(token)) && def.providedIn === 'root') {\n                if (provider.useFactory) {\n                    this._rootProviderOverrides.push({ provide: token, useFactory: provider.useFactory, deps: provider.deps || [] });\n                }\n                else {\n                    this._rootProviderOverrides.push({ provide: token, useValue: provider.useValue });\n                }\n            }\n            var flags = 0;\n            var value;\n            if (provider.useFactory) {\n                flags |= 1024 /* TypeFactoryProvider */;\n                value = provider.useFactory;\n            }\n            else {\n                flags |= 256 /* TypeValueProvider */;\n                value = provider.useValue;\n            }\n            var deps = (provider.deps || []).map(function (dep) {\n                var depFlags = 0 /* None */;\n                var depToken;\n                if (Array.isArray(dep)) {\n                    dep.forEach(function (entry) {\n                        if (entry instanceof core.Optional) {\n                            depFlags |= 2 /* Optional */;\n                        }\n                        else if (entry instanceof core.SkipSelf) {\n                            depFlags |= 1 /* SkipSelf */;\n                        }\n                        else {\n                            depToken = entry;\n                        }\n                    });\n                }\n                else {\n                    depToken = dep;\n                }\n                return [depFlags, depToken];\n            });\n            core.ɵoverrideProvider({ token: token, flags: flags, deps: deps, value: value, deprecatedBehavior: deprecated });\n        };\n        TestBedViewEngine.prototype.overrideTemplateUsingTestingModule = function (component, template) {\n            this._assertNotInstantiated('overrideTemplateUsingTestingModule', 'override template');\n            var OverrideComponent = /** @class */ (function () {\n                function OverrideComponent() {\n                }\n                OverrideComponent = __decorate([\n                    core.Component({ selector: 'empty', template: template, jit: true })\n                ], OverrideComponent);\n                return OverrideComponent;\n            }());\n            this._templateOverrides.push({ component: component, templateOf: OverrideComponent });\n        };\n        TestBedViewEngine.prototype.createComponent = function (component) {\n            var _this = this;\n            this._initIfNeeded();\n            var componentFactory = this._compiler.getComponentFactory(component);\n            if (!componentFactory) {\n                throw new Error(\"Cannot create the component \" + core.ɵstringify(component) + \" as it was not imported into the testing module!\");\n            }\n            var noNgZone = this.get(ComponentFixtureNoNgZone, false);\n            var autoDetect = this.get(ComponentFixtureAutoDetect, false);\n            var ngZone = noNgZone ? null : this.get(core.NgZone, null);\n            var testComponentRenderer = this.get(TestComponentRenderer);\n            var rootElId = \"root\" + _nextRootElementId$1++;\n            testComponentRenderer.insertRootElement(rootElId);\n            var initComponent = function () {\n                var componentRef = componentFactory.create(core.Injector.NULL, [], \"#\" + rootElId, _this._moduleRef);\n                return new ComponentFixture(componentRef, ngZone, autoDetect);\n            };\n            var fixture = !ngZone ? initComponent() : ngZone.run(initComponent);\n            this._activeFixtures.push(fixture);\n            return fixture;\n        };\n        return TestBedViewEngine;\n    }());\n    /**\n     * @description\n     * Configures and initializes environment for unit testing and provides methods for\n     * creating components and services in unit tests.\n     *\n     * `TestBed` is the primary api for writing unit tests for Angular applications and libraries.\n     *\n     * Note: Use `TestBed` in tests. It will be set to either `TestBedViewEngine` or `TestBedRender3`\n     * according to the compiler used.\n     *\n     * @publicApi\n     */\n    var TestBed = core.ɵivyEnabled ? TestBedRender3 : TestBedViewEngine;\n    /**\n     * Returns a singleton of the applicable `TestBed`.\n     *\n     * It will be either an instance of `TestBedViewEngine` or `TestBedRender3`.\n     *\n     * @publicApi\n     */\n    var getTestBed = core.ɵivyEnabled ? _getTestBedRender3 : _getTestBedViewEngine;\n    var testBed$1;\n    function _getTestBedViewEngine() {\n        return testBed$1 = testBed$1 || new TestBedViewEngine();\n    }\n    /**\n     * Allows injecting dependencies in `beforeEach()` and `it()`.\n     *\n     * Example:\n     *\n     * ```\n     * beforeEach(inject([Dependency, AClass], (dep, object) => {\n     *   // some code that uses `dep` and `object`\n     *   // ...\n     * }));\n     *\n     * it('...', inject([AClass], (object) => {\n     *   object.doSomething();\n     *   expect(...);\n     * })\n     * ```\n     *\n     * Notes:\n     * - inject is currently a function because of some Traceur limitation the syntax should\n     * eventually\n     *   becomes `it('...', @Inject (object: AClass, async: AsyncTestCompleter) => { ... });`\n     *\n     * @publicApi\n     */\n    function inject(tokens, fn) {\n        var testBed = getTestBed();\n        if (tokens.indexOf(AsyncTestCompleter) >= 0) {\n            // Not using an arrow function to preserve context passed from call site\n            return function () {\n                var _this = this;\n                // Return an async test method that returns a Promise if AsyncTestCompleter is one of\n                // the injected tokens.\n                return testBed.compileComponents().then(function () {\n                    var completer = testBed.get(AsyncTestCompleter);\n                    testBed.execute(tokens, fn, _this);\n                    return completer.promise;\n                });\n            };\n        }\n        else {\n            // Not using an arrow function to preserve context passed from call site\n            return function () { return testBed.execute(tokens, fn, this); };\n        }\n    }\n    /**\n     * @publicApi\n     */\n    var InjectSetupWrapper = /** @class */ (function () {\n        function InjectSetupWrapper(_moduleDef) {\n            this._moduleDef = _moduleDef;\n        }\n        InjectSetupWrapper.prototype._addModule = function () {\n            var moduleDef = this._moduleDef();\n            if (moduleDef) {\n                getTestBed().configureTestingModule(moduleDef);\n            }\n        };\n        InjectSetupWrapper.prototype.inject = function (tokens, fn) {\n            var self = this;\n            // Not using an arrow function to preserve context passed from call site\n            return function () {\n                self._addModule();\n                return inject(tokens, fn).call(this);\n            };\n        };\n        return InjectSetupWrapper;\n    }());\n    function withModule(moduleDef, fn) {\n        if (fn) {\n            // Not using an arrow function to preserve context passed from call site\n            return function () {\n                var testBed = getTestBed();\n                if (moduleDef) {\n                    testBed.configureTestingModule(moduleDef);\n                }\n                return fn.apply(this);\n            };\n        }\n        return new InjectSetupWrapper(function () { return moduleDef; });\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var _global$1 = (typeof window === 'undefined' ? global : window);\n    // Reset the test providers and the fake async zone before each test.\n    if (_global$1.beforeEach) {\n        _global$1.beforeEach(function () {\n            TestBed.resetTestingModule();\n            resetFakeAsyncZone();\n        });\n    }\n    // TODO(juliemr): remove this, only used because we need to export something to have compilation\n    // work.\n    var __core_private_testing_placeholder__ = '';\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // This file only reexports content of the `src` folder. Keep it that way.\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.ɵangular_packages_core_testing_testing_b = TestBedRender3;\n    exports.ɵangular_packages_core_testing_testing_c = _getTestBedRender3;\n    exports.ɵangular_packages_core_testing_testing_a = TestBedViewEngine;\n    exports.TestBed = TestBed;\n    exports.getTestBed = getTestBed;\n    exports.inject = inject;\n    exports.InjectSetupWrapper = InjectSetupWrapper;\n    exports.withModule = withModule;\n    exports.ɵMetadataOverrider = MetadataOverrider;\n    exports.async = async;\n    exports.ComponentFixture = ComponentFixture;\n    exports.resetFakeAsyncZone = resetFakeAsyncZone;\n    exports.fakeAsync = fakeAsync;\n    exports.tick = tick;\n    exports.flush = flush;\n    exports.discardPeriodicTasks = discardPeriodicTasks;\n    exports.flushMicrotasks = flushMicrotasks;\n    exports.TestComponentRenderer = TestComponentRenderer;\n    exports.ComponentFixtureAutoDetect = ComponentFixtureAutoDetect;\n    exports.ComponentFixtureNoNgZone = ComponentFixtureNoNgZone;\n    exports.__core_private_testing_placeholder__ = __core_private_testing_placeholder__;\n    exports.ɵTestingCompiler = TestingCompiler;\n    exports.ɵTestingCompilerFactory = TestingCompilerFactory;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=core-testing.umd.js.map\n"]}