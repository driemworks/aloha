"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GET_ACCESS_TOKEN = 'GET_ACCESS_TOKEN';
exports.GET_ACCESS_TOKEN_SUCCESS = 'GET_ACCESS_TOKEN_SUCCESS';
exports.GET_ACCESS_TOKEN_FAILED = 'GET_ACCESS_TOKEN_FAILED';
exports.REFRESH_ACCESS_TOKEN = 'REFRESH_ACCESS_TOKEN';
exports.REFRESH_ACCESS_TOKEN_SUCCESS = 'REFRESH_ACCESS_TOKEN_SUCCESS';
exports.REFRESH_ACCESS_TOKEN_FAILED = 'REFRESH_ACCESS_TOKEN_FAILED';
exports.UPDATE_LIGHT_STATE = 'UPDATE_LIGHT_STATE';
exports.UPDATE_LIGHT_STATE_SUCCESS = 'UPDATE_LIGHT_STATE_SUCCESS';
exports.GET_LIGHT_STATE = 'GET_LIGHT_STATE';
exports.GET_LIGHT_STATE_SUCCESS = 'GET_LIGHT_STATE_SUCCESS';
var GetLightStateAction = /** @class */ (function () {
    function GetLightStateAction(bridgeIp, username) {
        this.bridgeIp = bridgeIp;
        this.username = username;
        this.type = exports.GET_LIGHT_STATE;
    }
    return GetLightStateAction;
}());
exports.GetLightStateAction = GetLightStateAction;
var GetLightStateSuccessAction = /** @class */ (function () {
    function GetLightStateSuccessAction(lightState) {
        this.lightState = lightState;
        this.type = exports.GET_LIGHT_STATE_SUCCESS;
    }
    return GetLightStateSuccessAction;
}());
exports.GetLightStateSuccessAction = GetLightStateSuccessAction;
var UpdateLightStateAction = /** @class */ (function () {
    function UpdateLightStateAction(user, isWifiConnection) {
        this.user = user;
        this.isWifiConnection = isWifiConnection;
        this.type = exports.UPDATE_LIGHT_STATE;
    }
    return UpdateLightStateAction;
}());
exports.UpdateLightStateAction = UpdateLightStateAction;
var UpdateLightStateSuccessAction = /** @class */ (function () {
    function UpdateLightStateSuccessAction(result) {
        this.result = result;
        this.type = exports.UPDATE_LIGHT_STATE_SUCCESS;
    }
    return UpdateLightStateSuccessAction;
}());
exports.UpdateLightStateSuccessAction = UpdateLightStateSuccessAction;
var RequestRefreshTokenAction = /** @class */ (function () {
    function RequestRefreshTokenAction(refreshToken) {
        this.refreshToken = refreshToken;
        this.type = exports.REFRESH_ACCESS_TOKEN;
    }
    return RequestRefreshTokenAction;
}());
exports.RequestRefreshTokenAction = RequestRefreshTokenAction;
var RequestRefreshTokenSuccessAction = /** @class */ (function () {
    function RequestRefreshTokenSuccessAction(user) {
        this.user = user;
        this.type = exports.REFRESH_ACCESS_TOKEN_SUCCESS;
    }
    return RequestRefreshTokenSuccessAction;
}());
exports.RequestRefreshTokenSuccessAction = RequestRefreshTokenSuccessAction;
var GetAccessTokenAction = /** @class */ (function () {
    function GetAccessTokenAction(code, user) {
        this.code = code;
        this.user = user;
        this.type = exports.GET_ACCESS_TOKEN;
    }
    return GetAccessTokenAction;
}());
exports.GetAccessTokenAction = GetAccessTokenAction;
var GetAccessTokenSuccessAction = /** @class */ (function () {
    function GetAccessTokenSuccessAction(accessToken, refreshToken, user) {
        this.accessToken = accessToken;
        this.refreshToken = refreshToken;
        this.user = user;
        this.type = exports.GET_ACCESS_TOKEN_SUCCESS;
    }
    return GetAccessTokenSuccessAction;
}());
exports.GetAccessTokenSuccessAction = GetAccessTokenSuccessAction;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHVlLmFjdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJodWUuYWN0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUthLFFBQUEsZ0JBQWdCLEdBQUcsa0JBQWtCLENBQUM7QUFDdEMsUUFBQSx3QkFBd0IsR0FBRywwQkFBMEIsQ0FBQztBQUN0RCxRQUFBLHVCQUF1QixHQUFHLHlCQUF5QixDQUFDO0FBRXBELFFBQUEsb0JBQW9CLEdBQUcsc0JBQXNCLENBQUM7QUFDOUMsUUFBQSw0QkFBNEIsR0FBRyw4QkFBOEIsQ0FBQztBQUM5RCxRQUFBLDJCQUEyQixHQUFHLDZCQUE2QixDQUFDO0FBRTVELFFBQUEsa0JBQWtCLEdBQUksb0JBQW9CLENBQUM7QUFDM0MsUUFBQSwwQkFBMEIsR0FBSSw0QkFBNEIsQ0FBQztBQUUzRCxRQUFBLGVBQWUsR0FBRyxpQkFBaUIsQ0FBQztBQUNwQyxRQUFBLHVCQUF1QixHQUFHLHlCQUF5QixDQUFDO0FBRWpFO0lBRUksNkJBQW1CLFFBQWdCLEVBQVMsUUFBZ0I7UUFBekMsYUFBUSxHQUFSLFFBQVEsQ0FBUTtRQUFTLGFBQVEsR0FBUixRQUFRLENBQVE7UUFEbkQsU0FBSSxHQUFHLHVCQUFlLENBQUM7SUFDZ0MsQ0FBQztJQUNyRSwwQkFBQztBQUFELENBQUMsQUFIRCxJQUdDO0FBSFksa0RBQW1CO0FBS2hDO0lBRUksb0NBQW1CLFVBQXdCO1FBQXhCLGVBQVUsR0FBVixVQUFVLENBQWM7UUFEbEMsU0FBSSxHQUFHLCtCQUF1QixDQUFDO0lBQ08sQ0FBQztJQUNwRCxpQ0FBQztBQUFELENBQUMsQUFIRCxJQUdDO0FBSFksZ0VBQTBCO0FBS3ZDO0lBRUksZ0NBQW1CLElBQVUsRUFBUyxnQkFBeUI7UUFBNUMsU0FBSSxHQUFKLElBQUksQ0FBTTtRQUFTLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBUztRQUR0RCxTQUFJLEdBQUcsMEJBQWtCLENBQUM7SUFDK0IsQ0FBQztJQUN2RSw2QkFBQztBQUFELENBQUMsQUFIRCxJQUdDO0FBSFksd0RBQXNCO0FBS25DO0lBRUksdUNBQW1CLE1BQWM7UUFBZCxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBRHhCLFNBQUksR0FBRyxrQ0FBMEIsQ0FBQztJQUNQLENBQUM7SUFDekMsb0NBQUM7QUFBRCxDQUFDLEFBSEQsSUFHQztBQUhZLHNFQUE2QjtBQUsxQztJQUVJLG1DQUFtQixZQUFvQjtRQUFwQixpQkFBWSxHQUFaLFlBQVksQ0FBUTtRQUQ5QixTQUFJLEdBQUcsNEJBQW9CLENBQUM7SUFDTSxDQUFDO0lBQ2hELGdDQUFDO0FBQUQsQ0FBQyxBQUhELElBR0M7QUFIWSw4REFBeUI7QUFLdEM7SUFFSSwwQ0FBbUIsSUFBVTtRQUFWLFNBQUksR0FBSixJQUFJLENBQU07UUFEcEIsU0FBSSxHQUFHLG9DQUE0QixDQUFDO0lBQ1osQ0FBQztJQUN0Qyx1Q0FBQztBQUFELENBQUMsQUFIRCxJQUdDO0FBSFksNEVBQWdDO0FBSzdDO0lBRUksOEJBQW1CLElBQVksRUFBUyxJQUFVO1FBQS9CLFNBQUksR0FBSixJQUFJLENBQVE7UUFBUyxTQUFJLEdBQUosSUFBSSxDQUFNO1FBRHpDLFNBQUksR0FBRyx3QkFBZ0IsQ0FBQztJQUNxQixDQUFDO0lBQzNELDJCQUFDO0FBQUQsQ0FBQyxBQUhELElBR0M7QUFIWSxvREFBb0I7QUFLakM7SUFFSSxxQ0FBbUIsV0FBbUIsRUFBUyxZQUFvQixFQUFTLElBQVU7UUFBbkUsZ0JBQVcsR0FBWCxXQUFXLENBQVE7UUFBUyxpQkFBWSxHQUFaLFlBQVksQ0FBUTtRQUFTLFNBQUksR0FBSixJQUFJLENBQU07UUFEN0UsU0FBSSxHQUFHLGdDQUF3QixDQUFDO0lBQ2lELENBQUM7SUFDL0Ysa0NBQUM7QUFBRCxDQUFDLEFBSEQsSUFHQztBQUhZLGtFQUEyQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFjdGlvbiB9IGZyb20gXCJAbmdyeC9zdG9yZVwiO1xyXG5pbXBvcnQgeyBVc2VyIH0gZnJvbSBcIi4uLy4uL21vZGVscy91c2VyLm1vZGVsXCI7XHJcbmltcG9ydCB7IExpZ2h0U3RhdGUgfSBmcm9tIFwifi9hcHAvbW9kZWxzL2xpZ2h0c3RhdGUubW9kZWxcIjtcclxuXHJcblxyXG5leHBvcnQgY29uc3QgR0VUX0FDQ0VTU19UT0tFTiA9ICdHRVRfQUNDRVNTX1RPS0VOJztcclxuZXhwb3J0IGNvbnN0IEdFVF9BQ0NFU1NfVE9LRU5fU1VDQ0VTUyA9ICdHRVRfQUNDRVNTX1RPS0VOX1NVQ0NFU1MnO1xyXG5leHBvcnQgY29uc3QgR0VUX0FDQ0VTU19UT0tFTl9GQUlMRUQgPSAnR0VUX0FDQ0VTU19UT0tFTl9GQUlMRUQnO1xyXG5cclxuZXhwb3J0IGNvbnN0IFJFRlJFU0hfQUNDRVNTX1RPS0VOID0gJ1JFRlJFU0hfQUNDRVNTX1RPS0VOJztcclxuZXhwb3J0IGNvbnN0IFJFRlJFU0hfQUNDRVNTX1RPS0VOX1NVQ0NFU1MgPSAnUkVGUkVTSF9BQ0NFU1NfVE9LRU5fU1VDQ0VTUyc7XHJcbmV4cG9ydCBjb25zdCBSRUZSRVNIX0FDQ0VTU19UT0tFTl9GQUlMRUQgPSAnUkVGUkVTSF9BQ0NFU1NfVE9LRU5fRkFJTEVEJztcclxuXHJcbmV4cG9ydCBjb25zdCBVUERBVEVfTElHSFRfU1RBVEUgID0gJ1VQREFURV9MSUdIVF9TVEFURSc7XHJcbmV4cG9ydCBjb25zdCBVUERBVEVfTElHSFRfU1RBVEVfU1VDQ0VTUyAgPSAnVVBEQVRFX0xJR0hUX1NUQVRFX1NVQ0NFU1MnO1xyXG5cclxuZXhwb3J0IGNvbnN0IEdFVF9MSUdIVF9TVEFURSA9ICdHRVRfTElHSFRfU1RBVEUnO1xyXG5leHBvcnQgY29uc3QgR0VUX0xJR0hUX1NUQVRFX1NVQ0NFU1MgPSAnR0VUX0xJR0hUX1NUQVRFX1NVQ0NFU1MnO1xyXG5cclxuZXhwb3J0IGNsYXNzIEdldExpZ2h0U3RhdGVBY3Rpb24gaW1wbGVtZW50cyBBY3Rpb24ge1xyXG4gICAgcmVhZG9ubHkgdHlwZSA9IEdFVF9MSUdIVF9TVEFURTtcclxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBicmlkZ2VJcDogU3RyaW5nLCBwdWJsaWMgdXNlcm5hbWU6IFN0cmluZykgeyB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBHZXRMaWdodFN0YXRlU3VjY2Vzc0FjdGlvbiBpbXBsZW1lbnRzIEFjdGlvbiB7XHJcbiAgICByZWFkb25seSB0eXBlID0gR0VUX0xJR0hUX1NUQVRFX1NVQ0NFU1M7XHJcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgbGlnaHRTdGF0ZTogTGlnaHRTdGF0ZVtdKSB7IH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFVwZGF0ZUxpZ2h0U3RhdGVBY3Rpb24gaW1wbGVtZW50cyBBY3Rpb24ge1xyXG4gICAgcmVhZG9ubHkgdHlwZSA9IFVQREFURV9MSUdIVF9TVEFURTtcclxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyB1c2VyOiBVc2VyLCBwdWJsaWMgaXNXaWZpQ29ubmVjdGlvbjogYm9vbGVhbikge31cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFVwZGF0ZUxpZ2h0U3RhdGVTdWNjZXNzQWN0aW9uIGltcGxlbWVudHMgQWN0aW9uIHtcclxuICAgIHJlYWRvbmx5IHR5cGUgPSBVUERBVEVfTElHSFRfU1RBVEVfU1VDQ0VTUztcclxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyByZXN1bHQ6IHN0cmluZykge31cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFJlcXVlc3RSZWZyZXNoVG9rZW5BY3Rpb24gaW1wbGVtZW50cyBBY3Rpb24ge1xyXG4gICAgcmVhZG9ubHkgdHlwZSA9IFJFRlJFU0hfQUNDRVNTX1RPS0VOO1xyXG4gICAgY29uc3RydWN0b3IocHVibGljIHJlZnJlc2hUb2tlbjogc3RyaW5nKSB7IH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFJlcXVlc3RSZWZyZXNoVG9rZW5TdWNjZXNzQWN0aW9uIGltcGxlbWVudHMgQWN0aW9uIHtcclxuICAgIHJlYWRvbmx5IHR5cGUgPSBSRUZSRVNIX0FDQ0VTU19UT0tFTl9TVUNDRVNTO1xyXG4gICAgY29uc3RydWN0b3IocHVibGljIHVzZXI6IFVzZXIpIHsgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgR2V0QWNjZXNzVG9rZW5BY3Rpb24gaW1wbGVtZW50cyBBY3Rpb24ge1xyXG4gICAgcmVhZG9ubHkgdHlwZSA9IEdFVF9BQ0NFU1NfVE9LRU47XHJcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgY29kZTogU3RyaW5nLCBwdWJsaWMgdXNlcjogVXNlcikgeyB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBHZXRBY2Nlc3NUb2tlblN1Y2Nlc3NBY3Rpb24gaW1wbGVtZW50cyBBY3Rpb24ge1xyXG4gICAgcmVhZG9ubHkgdHlwZSA9IEdFVF9BQ0NFU1NfVE9LRU5fU1VDQ0VTUztcclxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBhY2Nlc3NUb2tlbjogU3RyaW5nLCBwdWJsaWMgcmVmcmVzaFRva2VuOiBTdHJpbmcsIHB1YmxpYyB1c2VyOiBVc2VyKSB7IH1cclxufVxyXG5cclxuZXhwb3J0IHR5cGUgSHVlQWN0aW9ucyA9IEdldEFjY2Vzc1Rva2VuQWN0aW9uIHwgR2V0QWNjZXNzVG9rZW5TdWNjZXNzQWN0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHwgUmVxdWVzdFJlZnJlc2hUb2tlbkFjdGlvbiB8IFJlcXVlc3RSZWZyZXNoVG9rZW5TdWNjZXNzQWN0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHwgVXBkYXRlTGlnaHRTdGF0ZUFjdGlvbiB8IFVwZGF0ZUxpZ2h0U3RhdGVTdWNjZXNzQWN0aW9uIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB8IEdldExpZ2h0U3RhdGVBY3Rpb24gfCBHZXRMaWdodFN0YXRlU3VjY2Vzc0FjdGlvbjsiXX0=